-- There are functions that are used by other complex functions
-- I HAVE NO FUCKING IDEA WHY
-- but sometimes(!) you can access global functions only through filename.functionname()

function alife_obj(id)
	id = tonumber(id)
	if not id then
		callstack()
		assert(nil, "Don't look at me, senpai >//////<\n"..tostring(id))
	end
	return alife_object(id)
end

function level_object(id)
	id = tonumber(id)
	if not id then
		callstack()
		assert(nil, "Don't look at me, senpai >//////<\n"..tostring(id))
	end
	return level.object_by_id(id)
end

function get_player_tier()
	local player_rank = db.actor:character_rank()
	local tiers = igi_db.SectionView.new("tiers.ltx", "player_tiers")
	for tier, bounds in pairs(tiers:as_table()) do
		if player_rank >= bounds[1] and player_rank <= bounds[2] then
			return tier
		end
	end
	return "endgame"
end

function scale_value(str)
	local player_tier = igi_helper.get_player_tier()
	return string.gsub(str, "scalable", player_tier)
end

function check_common_npc(id)
	--Parameter is correct | not world map | not player |
	local npc = id and (id ~= 65535) and (id ~= AC_ID) and alife():object(id)
	--Exist | is stalker | alive |
	if not (npc and IsStalker(nil,npc:clsid()) and npc:alive()) then return false end
	--section_name has "sim_default", not "zombied"
	if not (string.find(npc:section_name(),"sim_default") and (not string.find(npc:section_name(),"zombied"))) then return false end
	--Not a special npc
	if not ((get_object_story_id(id) == nil) and (npc.group_id ~= 65535) and (get_object_story_id(npc.group_id) == nil)) then return false end
	--Squad
	local squad = get_object_squad(npc)
	if not (squad) then return false end
	--Smart
	local smart_id = squad.current_target_id
	local smrt = smart_id and SIMBOARD.smarts[smart_id]
	local smart = smrt and smrt.smrt
	local smart_name = smart and smart:name()
	--Fancy checking smart and squad
	if not (smart_name) then return false end
	if (simulation_objects.base_smarts[smart_name] == true) then return false end
	if (squad:get_script_target()) then return false end
	--[[
	printf("GhenTuong: check_common_npc: %s | %s | %s",npc:name(),squad:name(), smart_name)
	--]]
	return true
end

function get_community(character)
	if not character then return nil end
	
	if character == db.actor then
		return character_community(character)
	else
		return alife_character_community(character)
	end
end

function object_in_world(se_obj)
	return se_obj and se_obj.parent_id == 65535
end

function object_in_npc_inventory(obj_id)
	if not obj_id then return end
	local obj = igi_helper.alife_obj(obj_id)
	if not obj then return end
	return igi_helper.check_common_npc(obj.parent_id)
end

function object_in_player_inventory(obj_data)
	local obj = igi_helper.alife_obj(obj_data.id)
	if not obj then return end
	return obj.parent_id == 0
end

function get_object_level_id(se_obj)
	if not se_obj then return nil end
	
	local lvl_info_obj
	if object_in_world(se_obj) then
		lvl_info_obj = se_obj
	elseif igi_helper.check_common_npc(se_obj.parent_id) then
		lvl_info_obj = igi_helper.alife_obj(se_obj.parent_id)
	end
	
	if not lvl_info_obj then return end
	local obj_level_id = game_graph():vertex(lvl_info_obj.m_game_vertex_id):level_id()
	return obj_level_id
end

function get_object_level(obj, sim, gg)
	return alife():level_name(igi_helper.get_object_level_id(object))
end

function check_smarts(smarts_table, --[[optional]] nearby_req, --[[optional]] online_req)
	-- This function checks table of smarts for
	-->	- availability
	-->	- smart is not a base
	--> - smart is not in blacklisted_maps
	--> - (optional) online and on level of player (nearby)
	-- and returns a table of suitable smarts
	assert(type(smarts_table) == 'table', 'gt: check_smarts: not a table given')
	local return_list = {}
	local blacklisted_maps = igi_db.SectionView.new("blacklist.ltx", "maps"):as_set()
	local t = profile_timer()
	local m = profile_timer()
	
	for smart_name, smart_data in pairs(smarts_table) do
		if simulation_objects.available_by_id[smart_data.id] and	-- availability check
				not simulation_objects.base_smarts[smart_name] then	-- base smart check
			local smart_level = alife():level_name(game_graph():vertex(smart_data.m_game_vertex_id):level_id())
			
			
			if not blacklisted_maps[smart_level] and not smart_data.squads then						-- blacklist check
				local is_online = smart_data.online
				local is_nearby = string.find(simulation_objects.config:r_value(level.name(), "target_maps", 0, ""), smart_level)
				
				if (nearby_req == nil and online_req == nil) or		-- any OR
						((nearby_req and online_req) and (is_online or is_nearby)) or	-- nearby + online OR
						(not is_nearby == not nearby_req) and 		-- specified
						(not is_online == not online_req) then		-- not is used to convert to boolean
					return_list[#return_list + 1] = smart_name
				end
			end
		end
	end
	return return_list
end

function is_online(object)	-- TODO: rename
	player_level_id = igi_helper.get_object_level_id(db.player)
	object_level_id = igi_helper.get_object_level_id(object)
	return player_level_id == object_level_id
end

function is_nearby(object)
	local level = get_object_level(object)
	if not level then return false end
	return string.find(simulation_objects.config:r_value(level.name(), "target_maps", 0, ""), level)
end

function is_on_blacklisted_map(object, sim, gg)
	object_lvl = igi_helper.get_object_level(object, sim, gg)
	local blacklisted_maps = igi_db.SectionView.new("blacklist.ltx", "maps")
	if blacklisted_maps[object_lvl] then return true
	else return false end
end

function pick_quest_goods(quest_type)
	local possible_goods = igi_db.SectionView.new("quest_goods.ltx", quest_type)
	local goods_type = possible_goods:random()
	return goods_type
end

function change_goodwill(faction, task_name, task_successful)
	if not faction then return nil, "gt_goodwill: no faction given" end
	local task_info = igi_db.SectionView.new("task_info.ltx", task_name)
	local value
	if task_successful then 
		value = task_info and task_info.reward_goodwill or 50
	else 
		value = task_info and task_info.fail_goodwill or -50
	end

	xr_effects.complete_task_inc_goodwill(a, b, {value, faction})
end

function release_squad(squad_data)
	if not (squad_data.id) then printf("GhenTuong: no squad_data.id") return end
	if not (squad_data.section_name) then printf("GhenTuong: no squad_data.section_name") return end
	
	local squad = igi_helper.alife_obj(squad_data.id)

	if not (squad) then return end
	if not (squad:clsid() == clsid.online_offline_group_s) then return end
	if not (squad:section_name() == squad_data.section_name) then return end
	
	printf("GhenTuong: release %s", squad:name())
	SIMBOARD:remove_squad(squad)
end

function release_package(pkg_data)
	if not pkg_data then return end
	
	local pkg = igi_helper.alife_obj(pkg_data.id)
	if (pkg and (pkg:section_name() == pkg_data.section_name)) then
		printf("GhenTuong: release %s| parent_id = %s", pkg:name(), pkg.parent_id)
		safe_release_manager.release(pkg)
	end
end

function reward_quest_money(task_name)
	local difficulty_addition = {
		['start_game'] = 0,
		['midgame'] = 2000,
		['endgame'] = 4000,
	}
	local task_info = igi_db.SectionView.new("task_info.ltx", task_name)
	local sum_money = task_info and task_info.reward_money or 3000
	if sum_money == 0 then return end
	
	local player_tier = get_player_tier()

	if (not sum_money) and player_tier then
		sum_money = 2500 + difficulty_addition[player_tier]
	elseif not sum_money then
		sum_money = 2500
	end

	local money = {tostring(sum_money), tostring(sum_money+1000)}
	xr_effects.reward_random_money(nil, nil, money)
end

function release_targets_in_world(target_cache)
	local handlers = {
		['package'] = release_package,
		['squad'] = release_squad,
	}
	
	for _, entity in pairs(target_cache) do
		local handler = handlers[entity.entity_type]
		if handler then
			printf("Igi: Release from world: "..entity.section_name.." with id: "..entity.id)
			handler(entity)
		end
	end
end

function is_npc_online(id)
    for i,v in ipairs(db.OnlineStalkers) do 
        if (v == id) then 
            return true
        end
    end
end

function is_squad_member_online(se_squad)
	for k in se_squad:squad_members() do
		return is_npc_online(k.id)
	end
end

function object_exist(obj_data)
	local obj = igi_helper.alife_obj(obj_data.id)
	return obj and obj:section_name() == obj_data.section_name
end

function object_not_exist(obj_data)
	return not igi_helper.object_exist(obj_data)	-- Idk but it can't see object_exist or even gt_object_exist. Fuck lua.
end

function object_in_player_inv(obj_data)
	local se_obj = igi_helper.alife_obj(obj_data.id)
	return se_obj and se_obj.parent_id == 0
end

function deliver_item(obj_data)
	local npc = mob_trade.GetTalkingNpc()
	if npc then
		local obj = igi_helper.level_object(obj_data.id)
		db.actor:transfer_item(obj, npc)
		news_manager.relocate_item(db.actor, "out", obj_data.section_name, 1)
	else
		alife_release_id(obj_data.id)
	end
end

function scale_to_rank(tbl)
	local player_tier = get_player_tier()
	if not tbl then return end
    for k, v in pairs(tbl) do
        if type(v) == 'table' then
            tbl[k] = scale_to_rank(v)
        elseif type(v) == 'string' and string.find(v, "scalable") then
            tbl[k] = string.gsub(v, "scalable", player_tier)
        end
    end
    return tbl
end

function get_object_smart(se_obj)
	if se_obj.smart_id then
		return SIMBOARD.smarts[se_obj.smart_id].smrt and SIMBOARD.smarts[se_obj.smart_id].smrt:name()
	end

	for smart_name, data in pairs(SIMBOARD.smarts_by_names) do
		if se_obj.m_game_vertex_id == data.m_game_vertex_id and 
				se_obj.m_level_vertex_id == data.m_level_vertex_id then
			return smart_name
		end
	end
end

function get_object_location_description(se_obj)
	return dynamic_news_helper.GetPointDescription(se_obj)
end

itms_manager.igi_use_package = function (obj)
	local sec = obj:section()
	local possible_content_key = ini_sys:r_string_ex(sec,"possible_content")
	if not possible_content_key then return end

	local possible_content = igi_db.SectionView.new('item_types.ltx', igi_helper.scale_value(possible_content_key))
	local content = {}
	for i=1, ini_sys:r_float_ex(sec, "amount_content") do
		local v = possible_content:random()
		table.insert(content, v)
	end
	utils_item.delay_event(content, {obj:id()}, "medkit_ai1", true, 5)
end
