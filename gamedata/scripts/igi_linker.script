local ENTITY_ORDER_CACHE = {}

--------------------<Utility>--------------------
function make_link(typ, group_id, obj_id)
	if not typ or not group_id then
		callstack()
		assert(nil, "Igi: linker: no typ "..typ.." or id "..group_id)
	end

	local id = "$"..typ.."_"..tostring(group_id)
	if obj_id then id = id.."_"..tostring(obj_id) end
	id = id.."$"
	return id
end

local function is_dependency(str)
	return string.find(str, "^%$%D+_%d+_-%d*%$")
end

local function is_incomplete_dependency(str)
	return string.find(str, "^%$%D+_%d+%$")
end

local function set_default_deps(entities)
	local defaults = {
		['squad'] = {
			['location'] = "$smart_1_1$",
		},
		['package'] = {
			['location'] = "$smart_1_1$",
		},
	}

	for _, entity in pairs(entities) do
		if defaults[entity.entity_type] then
			for k, v in pairs(defaults[entity.entity_type]) do
				if not entity[k] then entity[k] = v end
			end
		end
	end
	return entities
end

local function finalize_dependency(dep)
	-- if there's only group num in dependency: add default object num (1)
	-- aka: "smart_1" -> "smart_1_1"
	if is_incomplete_dependency(dep) then dep = string.gsub(dep, "%$$", "_1$") end
	return dep
end

function assign_group_id(entities)
	local counters = {}
	for k, entity in pairs(entities) do
		counters[entity.entity_type] = counters[entity.entity_type] and counters[entity.entity_type] + 1 or 1
		entities[k].group_id = counters[entity.entity_type]
	end
	return entities, counters
end

local function assign_ids(entities)
	-- This function is used for dependency testing purposes and will not modify CACHE
	local new_entities = {}
	for _, entity in pairs(entities) do
		for i=1, entity.amount or 1 do
			assert(entity.group_id, "Group id not initialised: "..entity.entity_type)
			new_entities[make_link(entity.entity_type, entity.group_id, i)] = entity
		end
	end
	return new_entities
end

local function get_table_dependencies(tbl)
	local deps = {}
	for _, v in pairs(tbl) do
		-- this expression looks for strings of type: *entity_type*_*group_id*_*entity_id*(optional)
		if type(v) == 'string' and is_dependency(v) then
			deps[#deps + 1] = finalize_dependency(v)
		elseif type(v) == 'table' then
			for _, dep in pairs(get_table_dependencies(v)) do
				deps[#deps + 1] = finalize_dependency(dep)
			end
		end
	end
	return deps
end

local function get_all_dependencies(entities)
	local deps = {}
	for id, entity in pairs(assign_ids(entities)) do
		deps[id] = get_table_dependencies(entity)
	end
	return deps
end

local function is_dependencies_resolved(dep_list, objs_set)
	for _, dep in pairs(dep_list) do
        if not objs_set[dep] then
            return false
        end
    end
    return true
end

local function get_entity_links(task_table)
	local tbl, counter = assign_group_id(task_table)
	tbl = assign_ids(tbl)
	return tbl, counter
end

local function wrap_where(task_table)
	local array_keys = {"where", "look_in"}
	for _, entity in pairs(task_table) do
		for _, k in pairs(array_keys) do
			local val = entity[k]

			if type(val) == "string" and not is_dependency(val) then
				entity[k] = {entity[k]}
			end
		end
	end
end

function setup_task_locations(task_table)	-- REFACTOR
	local creatable_entities = {
		["package"] = true,
	}
	
	local where_conditions = {
		['nearby'] = true,
		['online'] = true,
		['far'] = true,
	}
	local links, count_entities = get_entity_links(task_table)
	count_entities.smart = count_entities.smart or 0
	local new_smarts = {}
	
	for _, entity in pairs(task_table) do
		if entity.to_create or creatable_entities[entity.entity_type] then
			if entity.where == nil then
				if not links["$smart_1_1$"] then
					utils_data.print_table(task_table, "Igi: Task table sucked")
					assert(nil, "IGI: task locations setup failed")
				end

				entity.where = "$smart_1_1$"

			elseif type(entity.where) == "table" or where_conditions[entity.where] then
				local smart = {
					entity_type = "smart",
					where = entity.where,
				}

				table.insert(new_smarts, smart)
				count_entities["smart"] = count_entities["smart"] + 1
				entity.where = "$smart_"..tostring(count_entities["smart"]).."_1$"
			end
		end
	end
	
	igi_utils.extend_list(task_table, new_smarts)
	wrap_where(task_table)
end

--------------------<Test dependencies>--------------------
local function get_entities_test_order(entities)
	entities = assign_group_id(entities)

	local objs = {}
	local order = {}
	local changes = true
	while changes do
		changes = false
		for object_id, dependencies in pairs(get_all_dependencies(entities)) do
			if not objs[object_id] and 
					(not next(dependencies) or is_dependencies_resolved(dependencies, objs)) then
				objs[object_id] = true
				order[#order + 1] = object_id
				changes = true
			end
		end
	end
	return order
end

--------------------<Setup order>--------------------
local function test_to_group_order(test_order)
	local group_order = {}
	local group_pool = {}
	for _, obj_name in pairs(test_order) do
		group_name = string.match(obj_name, "^(%$%D+_%d+)") .. "$"
		if not group_pool[group_name] then
			group_order[#group_order + 1] = group_name
			group_pool[group_name] = true
		end
	end
	return group_order
end

local function set_group_order(entities)
	local test_order = get_entities_test_order(entities)

	local entities_count = 0
	for _, entity in pairs(entities) do
		entities_count = entities_count + (entity.amount or 1)
	end
	if #test_order ~= entities_count then return nil, "Igi: linker: Can't resolve dependencies" end

	local order = test_to_group_order(test_order)
	return order
end

--------------------<Globals>--------------------
function get_order(task_name)
	local task_data = igi_db.get_task_data(task_name)
	assert(task_data, "Igi: Linker: Task not found: "..task_name)
	if not ENTITY_ORDER_CACHE[task_name] then
		local constructor = {}
		copy_table(constructor, task_data)
		ENTITY_ORDER_CACHE[task_name] = assert(set_group_order(constructor))
	end
	return ENTITY_ORDER_CACHE[task_name]
end

function link(obj_tbl, entities)
	for k, v in pairs(obj_tbl.as_table and obj_tbl:as_table() or obj_tbl) do
		if type(v) == "string" and is_dependency(v) then
			obj_tbl[k] = entities[v].id or entities[v].smart_name
		elseif type(v) == "table" then
			obj_tbl[k] = link(v, entities)
		end
	end
	return obj_tbl
end

















