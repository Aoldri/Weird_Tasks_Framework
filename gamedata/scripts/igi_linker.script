
local trace_dbg = igi_helper.trace_dbg

Dependency = {}
Dependency.mt = {}
setmetatable(Dependency, Dependency.mt)

function Dependency.mt:__call(str, this_entity)
	-- Won't work with dependencies with macros
	if type(str) ~= "string" then assert(nil, str) end
	
	local pattern = "%$([^_%.]+)_?([^_%.]*)_?([^_%.]*)%.?(.-)%$"
	local typ, group_id, entity_id, field = str:match(pattern)
	assert(typ and group_id, "Igi: something went wrong"..typ..group_id)
	
	local tbl = {
		type = typ,
		group_id = group_id or "1",
		entity_id = entity_id or "1",
		field = field ~= "" and field or "id",
		original = str,
		this = this_entity,
	}
	setmetatable(tbl, {__index = self})
	return tbl
end

function Dependency:wrap(str)
	return "$"..str.."$"
end

function Dependency:unwrap(str)
	return str:match("%$(.*)%$")
end

function Dependency:_get_unwrapped_group_link()
	return self.type.."_"..self.group_id
end

function Dependency:_get_unwrapped_link()
	return self:_get_unwrapped_group_link().."_"..self.entity_id
end

function Dependency:_to_unwrapped_string()
	return self:_get_unwrapped_link().."."..self.field
end

function Dependency:get_group_link()
	return self:wrap(self:_get_unwrapped_group_link())
end

function Dependency:get_link()
	return self:wrap(self:_get_unwrapped_link())
end

function Dependency:to_string(safe_mode)
	local str = self:wrap(self:_to_unwrapped_string())
	if safe_mode then str = igi_utils.escape_pattern(str) end
	return str
end

function Dependency:get_original(safe_mode)
	if safe_mode then return igi_utils.escape_pattern(self.original) end
	return self.original
end

function Dependency:get_linked_entity(entities)
	if self.type == "this" then
		return self.this
	else
		trace_dbg("getting entity", self, entities)
		return entities[self:get_link()] or entities[self:get_group_link()]
	end
end

function Dependency:resolve(entities)
	local entity = self:get_linked_entity(entities)
	return get_dependency_value(entity, self.field)
end

function Dependency:to_repr()
	local str = "Dependency:\n"
	for k, v in pairs(self) do
		if type(v) ~= "function" then
			str = str.."	"..k..": "..v.."\n"
		end
	end
	return str
end

function assign_group_id(entities)
	local counters = {}
	local grouped_entities = {}
	for k, entity in pairs(entities) do
		counters[entity.entity_type] = counters[entity.entity_type] and counters[entity.entity_type] + 1 or 1
		entity.group_id = counters[entity.entity_type]

		grouped_entities[make_entity_link(entity)] = entity
	end
	return grouped_entities, counters
end

function make_link(typ, group_id, obj_id)
	if not typ or not group_id then
		callstack()
		assert(nil, "Igi: linker: no typ "..typ.." or id "..group_id)
	end

	local id = "$"..typ.."_"..tostring(group_id)
	if obj_id then id = id.."_"..tostring(obj_id) end
	id = id.."$"
	return id
end

function make_entity_link(entity, obj_id)
	return make_link(entity.entity_type, entity.group_id, obj_id)
end

function has_dependency(str)
    return string.find(str, "%b$$")
end

function is_dependency(str)
	if not type(str) == "string" then return end
	return string.find(str, "^%$.*%$$")
end

local function escape_pattern(text)
    return text:gsub("([^%w])", "%%%1")
end

local function get_name_from_link(entity_link)
	return entity_link:match("%$(.*)%$")
end

function get_dependency_value(entity, field)
	return entity[field]
end

local function is_group_dependency(str)
	return not string.find(str, "%D+_%d+_%d+")
end

local function is_untargeted_dependency(str)
	return not string.find(str, "_%d+%..+")
end

local function finalize_dependency(dep)
	if is_group_dependency(dep) and not dep == "this" then 
		dep = string.gsub(dep, "%$$", "_1$") 
	end
	if is_untargeted_dependency(dep) then dep = string.gsub(dep, "%$$", ".id$") end
	return dep
end

function dependency_iterator(str)
	return str:gmatch("%b$$")
end

function has_self_reference(str)
	return string.find(str, "%$this")
end

local function tokenize_dependency(dep)
	local entity_link = "$"..string.match(dep, "([^%$]*)%.").."$"
	local field = string.match(dep, "%.([^%$]*)")

	return entity_link, field
end

function resolve_dependencies(str, entity, entity_name)
	if type(str) ~= 'string' then return str end

	local new_str = str
    local changes = 0
	if not string.find(str, entity_name) then entity_name = entity_name:match("(.*)_%d+$") end
	for dep in str:gmatch("%$"..entity_name..".-%$") do
		local before = escape_pattern(dep)
		dep = finalize_dependency(dep)
		local link, field = tokenize_dependency(dep)
		local value = get_dependency_value(entity, field)
        local new_changes
		new_str, new_changes = new_str:gsub(before, value)
        changes = changes + new_changes
	end
	return new_str, changes > 0
end

function resolve_self_reference(str, entity)
	local changes
    local changes_made
    repeat
        changes = false
        for field in str:gmatch("this%.(.-)%$") do
            changes = true
            changes_made = true
            str = str:gsub("%$this%."..field.."%$", get_dependency_value(entity, field))
        end
    until not changes
    return str, changes_made
end

function has_no_outer_links(tbl)
    for k,v in pairs(tbl) do
        if type(v) == 'string' and not string.find(k, "link") then 
            for k in v:gmatch("%$(.-)[%.%$]") do
                if k ~= 'this' and k ~= '' then
                    return false
                end
            end
        elseif type(v) == 'table' and not has_no_outer_links(v) then
            return false
        end
    end
    return true
end

function broadcast_entity(entity, entity_link, tbl)
    for k,v in pairs(tbl) do
        if type(v) == 'string' and not string.find(k, "link") then
            tbl[k] = resolve_dependencies(v, entity, get_name_from_link(entity_link))
        elseif type(v) == 'table' then
            broadcast_entity(entity, entity_link, v)
        end
    end
end
