
local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end

function actor_on_first_update()
	igi_models.add_interface_implementation(Entity.__cls, Entity)
	igi_models.add_interface_implementation('Cache', Cache)
	igi_models.add_interface_implementation(EntitiesTable.__cls, EntitiesTable)

	igi_taskdata.add_classification_rule(function (CACHE)
		local entities = CACHE:get_entities()
		if not entities then return end
		igi_models.set_class(entities, EntitiesTable.__cls)
		for _, v in pairs(entities) do
			igi_models.set_class(v, Entity.__cls)
		end
	end)
end

ENTITY_STATES = {
	INITIALISED = "INITIALISED",
	CREATED = "CREATED",
}

Cache = {
	get_entities = function (self)
		return self.entities
	end,

	initialise_quest = function (self, task_id)
		trace_dbg("setup "..task_id)
		igi_random.set_seed(task_id)

		local CACHE = igi_models.Cache.from(self) -- clone and finalize
		CACHE:set_task_id(task_id)
		trace_dbg("finalized CACHE", CACHE)

		CACHE.disabled = nil	-- not needed anymore
		CACHE.preconditions = nil	-- not needed

		if not CACHE:initialise_entities() then return end
		trace_dbg("CACHE after setup "..task_id, CACHE)
		return CACHE
	end,

	initialise_entities = function (self)
		return self:get_entities():initialise_all()
	end,

	create_all_entities = function (self)
		self:get_entities():create_all()
	end,
}

EntitiesTable = {
	__cls = 'EntitiesTable',

	new = function (entity_type)
		local t = {entity_type = entity_type}
		igi_models.set_class(t, EntitiesTable.__cls)
		return t
	end,

	add = function (self, entity)
		local link = entity:get_link()
		trace_assert(not self[link], "Entity already exists")
		self[link] = entity
	end,

	count_types = function (self)
		local counter = igi_utils.defaultdict(0)
		for _, v in pairs(self) do
			counter[v.entity_type] = counter[v.entity_type] + 1
		end
		return counter
	end,

	initialise_all = function (self)
		for _, entity in pairs(self) do
			trace_dbg('setup group '..tostring(_), entity)
			local ok, new_entities = entity:initialise()
			if not ok then return end
			trace_dbg('group_data, new entities', entity, new_entities)

			for _, entity in pairs(new_entities or {}) do
				self:add(entity)
			end
		end
		self:relink()
		return true
	end,

	create_all = function (self)
		-- if it's not ready after #entities_setup tries, it won't be ready
		for _=1, size_table(self) do
			for _,entity in pairs(self) do
				if (not entity:is_created()) and entity:has_no_outer_links() then
					trace_dbg("entity_setup", entity)
					local group_data = entity:create()

					for _, entity in pairs(group_data) do
						self:broadcast_entity(entity)
						entity:set_created()
						self:add(entity)
						trace_dbg("After broadcasting "..entity:get_link(), self)
					end
				end
			end
		end

		igi_callbacks.invoke_callbacks("on_after_target_creation")
	end,
}

Entity = {
	__cls = 'Entity',

	new = function (typ, group_id, entity_id)
		local t = {
			entity_type = typ,
			group_id = group_id,
			entity_id = entity_id
		}
		igi_models.set_class(t, Entity.__cls)
		return t
	end,

	link_to_se_obj = function (self, id)
		local se_obj = igi_world_state.WorldState.objects[id]
		trace_assert(se_obj, "Server object does not exist")
		self.id = se_obj.id
		self.section_name = se_obj:section_name()
	end,

	clone = function (self)
		local t = dup_table(self)
		igi_models.set_class(t, self.__cls)
		return t
	end,

	initialise = function (self)
		self._state = ENTITY_STATES.INITIALISED
		local target_tbl = self:get_target_table()
		return target_tbl["setup_"..self.entity_type](self)
	end,

	create = function (self)
		trace_assert(self._state == "initialised", "Trying to create raw entity")
		self._state = ENTITY_STATES.CREATED

		self:resolve_macros_and_self_references()
		trace_dbg("processed entity", self)

		local target_tbl = self:get_target_table()
    	local new_entities = target_tbl["create_"..self.entity_type](self)
		trace_dbg("group_data, new entities", self, new_entities)
		return new_entities
	end,

	is_created = function (self)
		return self._state == ENTITY_STATES.CREATED
	end,

	is_initialised = function (self)
		return self._state == ENTITY_STATES.INITIALISED
	end,
}
