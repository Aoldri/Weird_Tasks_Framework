TARGET_NAME = "assault"
PATTERN = "basic"

local do_for_every_target = igi_helper.do_for_every_target
local WorldState = igi_world_state.WorldState
local trace_assert = igi_helper.trace_assert
local TASK_STATUSES = igi_subtask.TASK_STATUSES


local function is_legit_squad(squad)
	local section = squad and squad:section_name()
	return squad and (not section:find("tushkano")) and (not section:find("rat"))
end

local function is_squad_at_smart(se_squad, smart_id)

	local scripted_target = se_squad:get_script_target()
	if scripted_target then
		return scripted_target == smart_id
	end

	if se_squad.current_target_id ~= smart_id then
		return false
	end

	if se_squad.current_action ~= 1 then
		return false
	end

	if not is_legit_squad(se_squad) then
		return false
	end

	return true
end

function is_completed(obj_data)
	trace_assert(SIMBOARD.smarts[obj_data.id], "assault but not smart")

	local cleared = true
	for _, sq_id in pairs(obj_data.squads) do
		local squad = WorldState.objects[sq_id]
		if squad then
			cleared = false
			if not (squad.first_update) then break end
			squad.stay_time = game.get_game_time()
			squad.force_online = true
		end
	end

	return cleared
end

local function mark_distant_squads(entity)
	local smart_position = WorldState.objects[entity.id].position

	for _, sq_id in pairs(entity.squads) do
		local se_squad = WorldState.objects[sq_id]
		if se_squad then
			local is_marked = level.map_has_object_spot(se_squad.id,"red_location") == 1
			local is_nearby = smart_position:distance_to_sqr(se_squad.position) < 2500

			if not (is_nearby or is_marked) then
				level.map_add_object_spot(se_squad.id, "red_location", "st_ui_pda_task_unknown_enemy")
			elseif is_nearby and is_marked then
				level.map_remove_object_spot(se_squad.id, "red_location")
			end
		end
	end
end

function get_status(entity)
	mark_distant_squads(entity)
	if is_completed(entity) then return TASK_STATUSES.COMPLETED end
	return TASK_STATUSES.RUNNING
end

local function redirect_to_smart(entity, CACHE, subtask_key)
	-- if find squad: add smart entity squad is on,
	-- assault smart instead of squad
	-- may produce copies of existing smarts, but that's okay
	igi_helper.trace_dbg("ASSAULT: redirect to smart "..subtask_key, CACHE)
	if string.find(subtask_key, "location") then return end
	entity.target = nil

	if entity.where_link then
		local loc = CACHE:get_entities():get_by_link(entity.where_link)
		loc.target = "assault"
		return
	end

	local entities = CACHE:get_entities()

	local smart_id = WorldState.objects[entity.id].current_target_id
	local smart_entity = {
		id = smart_id,
		target = "assault",
		order = entity.order,
		status = igi_subtask.TASK_STATUSES.RUNNING,
		entity_type = "location",
		group_id = entities:count_types().location + 1,
		entity_id = 1,
	}
	entities:add(smart_entity.group_id, smart_entity.entity_id, smart_entity, smart_entity)
end

local function add_target_squads(entity)
	entity.squads = {}
	local smart = SIMBOARD.smarts[entity.id]
	for sq_id in pairs(smart.squads) do
		local se_squad = WorldState.objects[sq_id]
		local actor_faction = character_community(db.actor)
		local sq_faction = se_squad:get_squad_community()
		if is_squad_at_smart(se_squad, entity.id) and
				game_relations.is_factions_enemies(actor_faction, sq_faction) then
			table.insert(entity.squads, se_squad.id)
		end
	end
end


function on_after_target_creation(CACHE)
	do_for_every_target(CACHE, TARGET_NAME, redirect_to_smart)
	do_for_every_target(CACHE, TARGET_NAME, add_target_squads)
end
