
local function print_time(t, title)
	title = title or "time"
	printf("Igi: "..title..": "..t:dateToString(0).." "..t:timeToString(2))
end

local function print_variables(...)
	local str = "Igi: variables: "
	for k, v in pairs({...}) do
		if k > 1 then
			str = str..", "
		end
		str = str..tostring(v)
	end
	printf(str)
end

local function get_daytime_bounds(daytime)
	local bounds = igi_db.TableView.new("daytime.ltx", "daytime_bounds")
	return bounds[daytime]
end
-----------------<Preconditions>----------------------------
local function rank_precondition(tier)
	local quest_tiers = igi_db.TableView.new("tiers.ltx", "player_tiers")
	assert(quest_tiers[tier] or ranks.stalker_rank_intervals[tier],
			"Igi: Invalid quest tier")

	if quest_tiers[tier] then
		lower_bound = quest_tiers[tier][1]
		higher_bound = quest_tiers[tier][2]
	elseif ranks.stalker_rank_intervals[tier] then
		lower_bound = ranks.stalker_rank_intervals[tier][1]
		higher_bound = ranks.stalker_rank_intervals[tier][2]
	end
	local player_rank = db.actor:character_rank()
	return player_rank >= lower_bound and player_rank <= higher_bound
end

local function goodwill_precondition(arg)
	local task_giver = mob_trade.GetTalkingNpc()
	local community = character_community(task_giver)
	return db.actor:community_goodwill(community) >= arg
end

local function daytime_precondition(arg)
	lower_bound, higher_bound = unpack(get_daytime_bounds(arg))

	local game_t = game.get_game_time()
	local y, m, d, h = game_t:get()
	local t = game.CTime()

	t:set(y, m, d, lower_bound, 0, 0, 0)
	if not (game_t > t) then
		return false
	end

	local dt = game.CTime()			-- higher bound check
	dt:setHMS((24-lower_bound+higher_bound)%24, 0, 0)	-- hassling with dt bcs higher bound can be at next day
	return game_t < (t + dt)
end

function check_preconditions(preconditions)
	if not preconditions then return true end
	local condition_handlers = {
		["player_tier"] = rank_precondition,
		["goodwill"] = goodwill_precondition,
		["daytime"] = daytime_precondition,
	}

	for condition, handler in pairs(condition_handlers) do
		-- not too good when there'll be more conditions but good enough now
		if preconditions[condition] and not handler(preconditions[condition]) then
			return false
		end
	end

	return true
end
-----------------<Task conditions>----------------------------
local function setup_timer(arg)
	printf(arg)
	print_variables(
		tonumber(string.match(arg, "(%d+)Y") or 0),
		tonumber(string.match(arg, "(%d+)M") or 0),
		tonumber(string.match(arg, "(%d+)D") or 0),
		tonumber(string.match(arg, "(%d+)h") or 0),
		tonumber(string.match(arg, "(%d+)m") or 0),
		tonumber(string.match(arg, "(%d+)s") or 0),
		tonumber(string.match(arg, "(%d+)ms") or 0))
	local cur_time = game.get_game_time()
	local dt = game.CTime()
	dt:set(
		tonumber(string.match(arg, "(%d+)Y") or 0),
		tonumber(string.match(arg, "(%d+)M") or 0),
		tonumber(string.match(arg, "(%d+)D") or 0),
		tonumber(string.match(arg, "(%d+)h") or 0),
		tonumber(string.match(arg, "(%d+)m") or 0),
		tonumber(string.match(arg, "(%d+)s") or 0),
		tonumber(string.match(arg, "(%d+)ms") or 0)
	)
	print_time(dt, "dt")
	local timer = cur_time + dt
	print_time(timer, "timer")
	return {timer:get()}
end

local function setup_until(arg)
	local bound, _ = get_daytime_bounds(arg)
	local y, m, d, h = game.get_game_time():get()
	if h > bound then
		d = d + 1
	end
	return {y, m, d, bound, 0, 0, 0}
end

function setup_task_conditions(conditions)
	if not conditions then return end
	local condition_setup_funcs = {
		["timer"] = setup_timer,
		["until"] = setup_until,
	}

	local condition_setup = {}
	for condition, func in pairs(condition_setup_funcs) do
		if conditions[condition] then
			condition_setup[condition] = func(conditions[condition])
		end
	end

	return condition_setup
end

local function check_timer(args)
	printf(type(args))
	local y, m, d, h, minute, s, ms = unpack(args)
	print_variables(y, m, d, h, minute, s, ms)
	print_variables(game.get_game_time():get())
	local timer = game.CTime()
	timer:set(y, m, d, h, minute, s, ms)
	print_time(timer, "timer")
	print_time(game.get_game_time(), "game_time")
	printf(tostring(game.get_game_time() < timer))
	return game.get_game_time() < timer
end

function is_task_conditions_valid(conditions_setup)
	if not conditions_setup then return true end
	utils_data.print_table(conditions_setup, "conditions")
	local check_funcs = {
		["timer"] = check_timer,
		["until"] = check_timer,
	}

	for k, args in pairs(conditions_setup) do
		printf(tostring(check_funcs[k]))
		if check_funcs[k] and not check_funcs[k](args) then
			return false
		end
	end

	return true
end
	
