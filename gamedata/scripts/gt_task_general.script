-- =============================================================
--	Quest function (gt_task_general.script)
--	Anomaly 1.5.5.0
--	GhenTuong
-- =============================================================
--< Define >--------------------------------------------------
local TEXT_HEADER = "gt_task_text_"
local MAX_TASK = 2

local blacklisted_maps = { --List of maps to skip in scans
	--North
	["l13_generators"]        = true,
	["l12_stancia_2"]         = true,
	["l12_stancia"]           = true,
	["l11_pripyat"]           = true,
	["l10_radar"]             = true,
	["l11_hospital"]          = true,
	
	--Underground
	["jupiter_underground"]   = true,
	["labx8"]                 = true,
	["l03u_agr_underground"]  = true,
	["l04u_labx18"]           = true,
	["l08u_brainlab"]         = true,
	["l10u_bunker"]           = true,
	["l12u_control_monolith"] = true,
	["l12u_sarcofag"]         = true,
	["l13u_warlab"]           = true,
	
	["fake_start"]            = true,
	
	--Unbalanced
	["l05_bar"]               = true,
}

local DATABASE_MUTANT = {
	["zombied"] = {
		squad = "gt_mutant_zombied",
		icon = "ui_icons_zombied21",
		rank = "c",
	},
	["flesh"] = {
		squad = "gt_mutant_flesh",
		icon = "ui_inGame2_Flesh",
		rank = "c",
	},
	["boar"] = {
		squad = "gt_mutant_boar",
		icon = "ui_icons_boar25",
		rank = "c",
	},
	["snork"] = {
		squad = "gt_mutant_snork",
		icon = "ui_inGame2_Snork",
		rank = "b",
	},
	["psy_dog"] = {
		squad = "gt_mutant_psy_dog",
		icon = "ui_inGame2_PseudoDog_1",
		rank = "b",
	},
	["lurker"] = {
		squad = "gt_mutant_lurker",
		icon = "ui_inGame2_Lurker",
		rank = "b",
	},
	["chimera"] = {
		squad = "gt_mutant_chimera",
		icon = "ui_inGame2_Himera",
		rank = "a",
	},
	["bloodsucker"] = {
		squad = "gt_mutant_bloodsucker",
		icon = "ui_icons_bloodsucker15",
		rank = "a",
	},
	["burer"] = {
		squad = "gt_mutant_burer",
		icon = "ui_inGame2_Burer",
		rank = "a",
	},
	["controller"] = {
		squad = "gt_mutant_controller",
		icon = "ui_inGame2_Controller",
		rank = "s",
	},
	["poltergeist"] = {
		squad = "gt_mutant_poltergeist",
		icon = "ui_inGame2_Poltergeyst",
		rank = "s",
	},
	["gigant"] = {
		squad = "gt_mutant_gigant",
		icon = "ui_inGame2_Pseudo_Gigant",
		rank = "s",
	}
}

local DATABASE_HEAVY_WEAPON = {
	-- One heavy weapon and five boxes of ammo
	[1] = {"wpn_rpg7","ammo_og-7b",20},
	[2] = {"wpn_m249","ammo_5.56x45_fmj",300},
	[3] = {"wpn_pkm","ammo_pkm_100",300},
	[4] = {"wpn_trg","ammo_magnum_300",50},
}

function get_heavy_weapon_list() return DATABASE_HEAVY_WEAPON end

local DATABASE_HEAVY = {
	["stalker"] = "gt_stalker_heavy_stalker",
	["dolg"] = "gt_stalker_heavy_dolg",
	["freedom"] = "gt_stalker_heavy_freedom",
	["csky"] = "gt_stalker_heavy_csky",
	["ecolog"] = "gt_stalker_heavy_ecolog",
	["killer"] = "gt_stalker_heavy_killer",
	["army"] = "gt_stalker_heavy_army",
	["bandit"] = "gt_stalker_heavy_bandit",
	["monolith"] = "gt_stalker_heavy_monolith",
}

local DATABASE_GUARD = {
	["stalker"] = "gt_stalker_guard_stalker",
	["dolg"] = "gt_stalker_guard_dolg",
	["freedom"] = "gt_stalker_guard_freedom",
	["csky"] = "gt_stalker_guard_csky",
	["ecolog"] = "gt_stalker_guard_ecolog",
	["killer"] = "gt_stalker_guard_killer",
	["army"] = "gt_stalker_guard_army",
	["bandit"] = "gt_stalker_guard_bandit",
	["monolith"] = "gt_stalker_guard_monolith",
}

local DATABASE_GUNSHIP = {
	["mi2"] = {
		strength = "weak",
		visual_name = [[dynamics\vehicles\mi2\veh_mi2_army]],
	},
	["mi24"] = {
		strength = "strong",
		visual_name = [[dynamics\vehicles\mi24\veh_mi24_army]],
	},
}

local DATABASE_PACKAGE = {
	["artifact"] = {
		"af_itcher",
		"af_blood",
		"af_electra_sparkler",
		"af_cristall_flower",
		"af_medusa",
		"af_night_star",
		"af_dummy_glassbeads",
		"af_dummy_battery",
		"af_soul",
		
		-- Tier 2
		"af_pin",
		"af_mincer_meat",
		"af_sponge",
		"af_lobster_eyes",
		"af_vyvert",
		"af_cristall",
		"af_bracelet",
		"af_ring",
		"af_electra_moonlight",
		"af_empty",
		"af_gravi",
		"af_eye",
		"af_dummy_dummy",
		"af_fuzz_kolobok",
		
		-- Tier 3
		"af_fireball",
		"af_baloon",
		"af_electra_flash",
		"af_black_spray",
		"af_full_empty",
		"af_gold_fish",
		"af_fire",
		"af_ice",
		"af_glass",
	},
	["weapon"] = {
		"wpn_9a91",
		"wpn_aek",
		"wpn_ash12",
		"wpn_aug",
		"wpn_aug_a3",
		"wpn_fal",
		"wpn_famas3",
		"wpn_fn2000",
		"wpn_fnc",
		"wpn_fort500",
		"wpn_g3sg1",
		"wpn_g36",
		"wpn_galil",
		"wpn_groza",
		"wpn_l96a1",
		"wpn_m24",
		"wpn_m60",
		"wpn_m79",
		"wpn_m82",
		"wpn_m98b",
		"wpn_m249",
		"wpn_mk14",
		"wpn_remington700",
		"wpn_scar",
		"wpn_sv98",
		"wpn_trg",
		"wpn_usas12",
		"wpn_vepr",
		"wpn_vssk",
		"wpn_wa2000",
		"wpn_xm8",
		"wpn_rpg7",
	},
	["medicine"] = {
		"bandage",
		"jgut",
		"medkit",
		"medkit_army",
		"stimpack",
		"stimpack_army",
	},
	["ammunition"] = {
		"ammo_5.45x39_fmj",
		"ammo_5.45x39_ap",
		"ammo_5.56x45_fmj",
		"ammo_5.56x45_ap",
		"ammo_9x39_pab9",
		"ammo_9x39_ap",
		"ammo_7.62x39_fmj",
		"ammo_7.62x39_ap",
		"ammo_7.62x51_fmj",
		"ammo_7.62x51_ap",
		"ammo_7.62x54_7h1",
		"ammo_7.62x54_ap",
		"ammo_12x70_buck",
	},
}

local DATABASE_TRANSACTION = {
	["artifact"] = {
		package_type = "artifact",
		package_name = "quest_package_4",
		num_package = 2,
		num_content = 1,
	},
	["weapon"] = {
		package_type = "weapon",
		package_name = "quest_package_1",
		num_package = 2,
		num_content = 1,
	},
	["medicine"] = {
		package_type = "medicine",
		package_name = "quest_package_2",
		num_package = 4,
		num_content = 6,
	},
	["ammunition"] = {
		package_type = "ammunition",
		package_name = "quest_package_3",
		num_package = 4,
		num_content = 6,
	},
}

-- =============================================================

local function SORT_ARTIFACT()
	local CACHE = {}
	local ini = ini_file("items\\settings\\artefacts.ltx")
	local result, id, value = "", "", ""
	local result2, id2, value2 = "", "", ""
	local n = ini:line_count("artefact_groups")
	for i=0,n-1 do
		result, id, value = ini:r_line_ex("artefact_groups",i,"","")
		if ini:section_exist(id) then
			local m = ini:line_count(id)
			for j=0,m-1 do
				result2, id2, value2 = ini:r_line_ex(id,j,"","")
				if id2 and ini_sys:section_exist(id2) then
					CACHE[id2] = true
					--printf("GhenTuong: load artifact: %s", id2)
				else
					printf("GhenTuong: load artifact from artefacts.ltx| incorrect section name: %s", id2)
				end
			end
		end
	end
	return CACHE
end

local function check_common_npc(id)
	--Parameter is correct | not world map | not player |
	local npc = id and (id ~= 65535) and (id ~= AC_ID) and alife():object(id)
	--Exist | is stalker | alive |
	if not (npc and IsStalker(nil,npc:clsid()) and npc:alive()) then return false end
	--section_name has "sim_default", not "zombied"
	if not (string.find(npc:section_name(),"sim_default") and (not string.find(npc:section_name(),"zombied"))) then return false end
	--I don't know what it is. Perhaps doesn't get special npc. Got from tasks_bounty.script line 77
	if not ((get_object_story_id(id) == nil) and (npc.group_id ~= 65535) and (get_object_story_id(npc.group_id) == nil)) then return false end
	--Squad
	local squad = get_object_squad(npc)
	if not (squad) then return false end
	--Smart
	local smart_id = squad.current_target_id
	local smrt = smart_id and SIMBOARD.smarts[smart_id]
	local smart = smrt and smrt.smrt
	local smart_name = smart and smart:name()
	--Fancy checking smart and squad
	if not (smart_name) then return false end
	if (simulation_objects.base_smarts[smart_name] == true) then return false end
	if (squad:get_script_target()) then return false end
	--[[
	printf("GhenTuong: check_common_npc: %s | %s | %s",npc:name(),squad:name(), smart_name)
	--]]
	return true
end

--< Utility Functions >--------------------------------------------------
function get_smart_terrain_setup(condition)
	printf("GhenTuong: Start Function| get_smart_terrain_setup")
	if not(condition) then return end
	local smart_list = {}
	local sim = alife()
	local gg = game_graph()
	local actor_level = level.name()
	local is_avail = simulation_objects.available_by_id
	
	local function check_smart(smart_name, smart_data)
		--Smart is available
		if not (is_avail[smart_data.id] == true) then return false end
		--Smart is not a base
		if not (simulation_objects.base_smarts[smart_name] == nil) then return false end
		--Smart is not in blacklisted_maps
		local smart_level = sim:level_name(gg:vertex(smart_data.m_game_vertex_id):level_id())
		if (blacklisted_maps[smart_level]) then return false end
		
		local is_online = smart_data.online
		local is_nearby = string.find(simulation_objects.config:r_value(actor_level, "target_maps", 0, ""), smart_level)
		
		if ((condition == 1) and is_online) --same level
		or ((condition == 2) and (is_online or is_nearby)) --same + nearby level
		or ((condition == 3) and is_nearby) --nearby levels only
		or ((condition == 4) and (not (is_online or is_nearby))) --far levels only
		or (condition == 5) --anywhere
		then
			return true
		end
		return false
	end
	--List smarts
	for smart_name, smart_data in pairs(SIMBOARD.smarts_by_names) do
		if (check_smart(smart_name, smart_data)) then
			smart_list[#smart_list+1] = smart_name
			--printf("GhenTuong: %s", smart_name)
		end
	end
	return smart_list[math.random(#smart_list)]
end

function get_mutant_data_setup(p)
	printf("GhenTuong: Start Function| get_mutant_data_setup")
	--p == nil, pick all
	--p[index] == rank, don't pick this rank.
	--List mutants
	local condition = p or {}
	local mutant_list = {}
	
	for name, data in pairs(DATABASE_MUTANT) do
		local check = true
		for index, excepted_rank in pairs(condition) do
			if (excepted_rank == data.rank) then check = false end
		end
		if (check) then
			mutant_list[#mutant_list+1] = name
		end
	end
	
	local pick_mutant = mutant_list[math.random(#mutant_list)]
	local CACHE = DATABASE_MUTANT[pick_mutant]
	CACHE.name = pick_mutant
	return CACHE
end

function get_faction_setup(condition)
	printf("GhenTuong: Start Function| get_faction_setup")
	if not (condition) then printf("GhenTuong: condition == nil") return "stalker" end
	local task_giver = mob_trade.GetTalkingNpc()
	
	if (condition == 0) then --Task giver's faction
		return character_community(task_giver) or "stalker"
	end
	
	if (condition == 1) then --Enemy with both player and task giver
		local faction_list = {}
		for faction in pairs(DATABASE_GUARD) do
			if (game_relations.is_factions_enemies(character_community(task_giver), faction) and game_relations.is_factions_enemies(character_community(db.actor), faction)) then
				faction_list[#faction_list + 1] = faction
			end
		end
		if (#faction_list == 0) then printf("GhenTuong: player and task giver doesn't share enemies") end
		return faction_list[math.random(#faction_list)] or "stalker"
	end
	
	if (condition == 2) then --Two factions: .enemy is enemy with you and task_giver, .client is enemy with .enemy.
		local faction_setup = {}
		--.enemy
		--Enemy with both player and task giver
		local enemy_list = {}
		local function check_faction_enemy(faction)
			if not (game_relations.is_factions_enemies(character_community(task_giver), faction)) then return false end
			if not (game_relations.is_factions_enemies(character_community(db.actor), faction)) then return false end
			if (faction == "monolith") then return false end
			return true
		end
		for faction in pairs(DATABASE_GUARD) do
			if (check_faction_enemy(faction)) then
				enemy_list[#enemy_list + 1] = faction
			end
		end
		if (#enemy_list == 0) then printf("GhenTuong: player and task giver doesn't share enemies") end
		faction_setup.enemy = enemy_list[math.random(#enemy_list)] or "stalker"
		
		--.client
		--Enemy with .enemy
		--Not enemy with task giver
		--Not same faction with task giver
		--Not monolith
		local client_list = {}
		local function check_faction_client(faction) --Mess up too much. Make a function for easier reading.
			if not (game_relations.is_factions_enemies(faction_setup.enemy, faction)) then return false end
			if (game_relations.is_factions_enemies(character_community(task_giver), faction)) then return false end
			if (faction == character_community(task_giver)) then return false end
			if (faction == "monolith") then return false end
			return true
		end
		for faction in pairs(DATABASE_GUARD) do
			if (check_faction_client(faction)) then
				client_list[#client_list + 1] = faction
			end
		end
		if (#client_list == 0) then printf("GhenTuong: can't setup client") end
		faction_setup.client = client_list[math.random(#client_list)] or "stalker"
		
		return faction_setup
	end
	
	printf("GhenTuong: condition value is not defined")
	return "stalker"
end

function get_squad_data_setup(squad_type)
	printf("GhenTuong: Start Function| get_squad_data_setup")
	if not (squad_type) then printf("GhenTuong: Not enough parameter") return end
	local CACHE = {}
	CACHE.faction = get_faction_setup(1)
	
	if     (squad_type == "guard") then CACHE.squad = DATABASE_GUARD[CACHE.faction]
	elseif (squad_type == "heavy") then CACHE.squad = DATABASE_HEAVY[CACHE.faction]
	else printf ("GhenTuong: squad_type unefined") end
	return CACHE
end

function get_gunship_data_setup()
	printf("GhenTuong: Start Function| get_gunship_data_setup")
	local CACHE = {}
	local list = {"mi2","mi24"}
	CACHE.gunship = list[math.random(#list)]
	CACHE.faction = get_faction_setup(1)
	return CACHE
end

function get_supply_data_setup()
	printf("GhenTuong: Start Function| get_supply_data_setup")
	local CACHE = {}
	local goods_list = {"medicine","ammunition"}
	local pick_package = goods_list[math.random(#goods_list)]
	CACHE.goods = DATABASE_TRANSACTION[pick_package]
	
	local faction = get_faction_setup(1)
	CACHE.enemy = {
		squad = DATABASE_GUARD[faction],
		faction = faction,
	}
	return CACHE
end

function get_transaction_data_setup()
	printf("GhenTuong: Start Function| get_transaction_data_setup")
	local CACHE = {}
	local goods_list = {"artifact","weapon"}
	local pick_package = goods_list[math.random(#goods_list)]
	CACHE.goods = DATABASE_TRANSACTION[pick_package]
	
	local faction = get_faction_setup(2)
	CACHE.enemy = {
		squad = DATABASE_GUARD[faction.enemy],
		faction = faction.enemy,
	}
	CACHE.client = {
		squad = DATABASE_GUARD[faction.client],
		faction = faction.client,
	}	
	return CACHE
end
---[[
function get_artifact_world_data_setup()
	printf("GhenTuong: Start Function| get_artifact_world_data_setup")
	--Find an artifact in world map with its id, section_name, parent_id
	--Return false if nothing found
	local CACHE = {}
	local is_artifact = SORT_ARTIFACT()
	
	local list = {}
	local sim = alife()
	local gg = game_graph()
	local actor_level = level.name()
	local function check_artifact(id)
		local object = sim:object(id)
		--Exist
		if not (object) then return false end
		--Is an artifact
		if not (is_artifact[object:section_name()]) then return false end--Location
		local level = sim:level_name(gg:vertex(object.m_game_vertex_id):level_id())
		if (blacklisted_maps[level]) then return false end
		--Same or nearby level
		local is_online = (gg:vertex(db.actor:game_vertex_id()):level_id() == gg:vertex(object.m_game_vertex_id):level_id())
		local is_nearby = string.find(simulation_objects.config:r_value(actor_level, "target_maps", 0, ""), level)
		if not (is_online or is_nearby) then return false end
		--In world map
		if not (object.parent_id == 65535) then return false end
		--[[DEBUG--
		printf("GhenTuong: %s|%s", object:name(), level)
		--]]
		return true
	end
	for i=1,65534 do
		if (check_artifact(i)) then list[#list+1] = i end
	end
	if not (#list > 0) then return false end
	
	local id = list[math.random(#list)]
	local artifact = alife():object(id)
	CACHE.artifact = {
		id = artifact.id,
		section_name = artifact:section_name(),
		parent_id = artifact.parent_id,
	}
	CACHE.level = alife():level_name(game_graph():vertex(artifact.m_game_vertex_id):level_id())
	return CACHE
end

function get_artifact_stalker_data_setup()
	printf("GhenTuong: Start Function| get_artifact_stalker_data_setup")
	--Find an artifact in a stalker with its id, section_name, parent_id
	--Enemy with player
	--Return false if nothing found
	local CACHE = {}
	local is_artifact = SORT_ARTIFACT()
	
	local list = {}
	local sim = alife()
	local gg = game_graph()
	local actor_level = level.name()
	local function check_artifact(id)
		local object = sim:object(id)
		--Exist
		if not (object) then return false end
		--Is an artifact or any container that has an artifact
		if not (is_artifact[object:section_name()]
		or string.find(object:section_name(),"_lead_box")
		or string.find(object:section_name(),"_af_iam")
		or string.find(object:section_name(),"_af_aac")
		or string.find(object:section_name(),"_af_aam")) then return false end
		--Check parent
		if not (check_common_npc(object.parent_id)) then return false end
		local npc = sim:object(object.parent_id)
		local npc_level = sim:level_name(game_graph():vertex(npc.m_game_vertex_id):level_id())
		--Location
		if (blacklisted_maps[npc_level]) then return false end
		--Same or nearby level
		local is_online = (gg:vertex(db.actor:game_vertex_id()):level_id() == gg:vertex(npc.m_game_vertex_id):level_id())
		local is_nearby = string.find(simulation_objects.config:r_value(actor_level, "target_maps", 0, ""), npc_level)
		if not (is_online or is_nearby) then return false end
		--Is enemy with player
		if not (game_relations.is_factions_enemies(character_community(db.actor), alife_character_community(npc))) then return false end
		--[[DEBUG--
		printf("GhenTuong: %s|%s|%s", object:name(), npc:name(), npc_level)
		--]]
		return true
	end
	for i=1,65534 do
		if (check_artifact(i)) then list[#list+1] = i end
	end
	if not (#list > 0) then return false end
	
	local id = list[math.random(#list)]
	local artifact = alife():object(id)
	local npc = alife():object(artifact.parent_id)
	CACHE.artifact = {
		id = artifact.id,
		section_name = artifact:section_name(),
		parent_id = artifact.parent_id,
	}
	CACHE.enemy = {
		name = npc:character_name(),
		faction = alife_character_community(npc),
		level = alife():level_name(game_graph():vertex(npc.m_game_vertex_id):level_id()),
	}
	return CACHE
end

function get_weapon_data_setup()
	printf("GhenTuong: Start Function| get_weapon_data_setup")
	local CACHE = {}
	
	weapon_excepted_classes = {
		[clsid.wpn_hpsa_s] 				= true,
		[clsid.wpn_pm_s] 				= true,
		[clsid.wpn_bm16_s] 				= true,
		[clsid.wpn_walther_s] 			= true,
		[clsid.wpn_usp45_s] 			= true,
		[clsid.wpn_knife_s] 			= true,
		
		[clsid.wpn_hpsa] 				= true,
		[clsid.wpn_pm] 					= true,
		[clsid.wpn_bm16] 				= true,
		[clsid.wpn_walther] 			= true,
		[clsid.wpn_usp45] 				= true,
		[clsid.wpn_knife] 				= true,
	}
	
	local list = {}
	local sim = alife()
	local gg = game_graph()
	local actor_level = level.name()
	local function check_gun(id)
		local object = sim:object(id)
		--Exist
		if not (object) then return false end
		--Is an gun
		if not (IsWeapon(nil,object:clsid()) and not weapon_excepted_classes[object:clsid()]) then return false end
		--Check parent
		if not (check_common_npc(object.parent_id)) then return false end
		local npc = sim:object(object.parent_id)
		local npc_level = sim:level_name(game_graph():vertex(npc.m_game_vertex_id):level_id())
		--Location
		if (blacklisted_maps[npc_level]) then return false end
		--Same or nearby level
		local is_online = (gg:vertex(db.actor:game_vertex_id()):level_id() == gg:vertex(npc.m_game_vertex_id):level_id())
		local is_nearby = string.find(simulation_objects.config:r_value(actor_level, "target_maps", 0, ""), npc_level)
		if not (is_online or is_nearby) then return false end
		--Is enemy with player
		if not (game_relations.is_factions_enemies(character_community(db.actor), alife_character_community(npc))) then return false end
		--[[DEBUG--
		printf("GhenTuong: %s|%s|%s", object:name(), npc:name(), npc_level)
		--]]
		return true
	end
	for i=1,65534 do
		if (check_gun(i)) then list[#list+1] = i end
	end
	if not (#list > 0) then return false end
	
	local id = list[math.random(#list)]
	local gun = alife():object(id)
	local npc = alife():object(gun.parent_id)
	CACHE.gun = {
		id = gun.id,
		section_name = gun:section_name(),
		parent_id = gun.parent_id,
	}
	CACHE.enemy = {
		name = npc:character_name(),
		faction = alife_character_community(npc),
		level = alife():level_name(game_graph():vertex(npc.m_game_vertex_id):level_id()),
	}
	return CACHE
end

--< Create target >--------------------------------------------------

function create_squad_at_smart(squad_descript, smart)
	printf("GhenTuong: Start Function| create_squad_at_smart")
	local CACHE = {}
	local squad = alun_utils.create_squad(squad_descript, smart)
	squad.stay_time = game.get_game_time()
	squad.force_online = true
	
	CACHE.id = squad.id
	CACHE.section_name = squad:section_name()
	return CACHE
end

function release_squad(CACHE)
	printf("GhenTuong: Start Function| release_squad")
	if not (CACHE.id) then printf("GhenTuong: no CACHE.id") return end
	if not (CACHE.section_name) then printf("GhenTuong: no CACHE.section_name") return end
	
	local squad = alife():object(CACHE.id)
	if not (squad) then printf("GhenTuong: %s doesn't exist", CACHE.id) return end
	
	if not (squad:clsid() == clsid.online_offline_group_s) then printf("GhenTuong: %s is not an online_offline_group_s", CACHE.id) return end
		
	if not (squad:section_name() == CACHE.section_name) then printf("GhenTuong: %s section_name doesn't fit", squad:section_name()) return end
	
	printf("GhenTuong: release %s", squad:name())
	safe_release_manager.release(squad)
end

function create_gunship(gunship_descript, smart)
	printf("GhenTuong: Start Function| create_gunship")
	local CACHE = {}
	if not (gunship_descript and gunship_descript.gunship and gunship_descript.faction) then
		printf("GhenTuong: not enought parameter")
		return
	end
	
	local gunship_data = DATABASE_GUNSHIP[gunship_descript.gunship]
	if not (gunship_data) then return end
	local gunship_name = "simulation_" .. gunship_descript.faction .. "_helicopter_" .. gunship_data.strength
	
	local smart_data = SIMBOARD.smarts_by_names[smart]
	local location = vector():set(
		smart_data.position.x,
		smart_data.position.y + 50,
		smart_data.position.z)
	
	local gunship = alife():create(gunship_name, location, smart_data.m_level_vertex_id, smart_data.m_game_vertex_id)
	if (gunship) then
		local data = stpk_utils.get_heli_data(gunship)
		if (data) then
			data.visual_name = gunship_data.visual_name
			data.motion_name = [[helicopter\aaa.anm]]
			data.startup_animation = "idle"
			data.skeleton_name = "idle"
			data.engine_sound = [[vehicles\helicopter\helicopter]]
			stpk_utils.set_heli_data(data, gunship)
			
			--[[
			for i,v in pairs(data) do printf("GhenTuong: gunship data %s = %s",i,v) end
			--]]
		end
	end
	gunship.scripted_target = smart
	gunship.force_online = true
	
	CACHE.id = gunship.id
	CACHE.section_name = gunship:section_name()
	return CACHE
end

function create_package(package_data, smart)
	printf("GhenTuong: Start Function| create_package")
	if not (package_data and smart) then printf("GhenTuong: not enought parameter") return end
	if not (package_data.package_type --What type of package?
		and package_data.package_name --Package name. Ex: "quest_package_1"
		and package_data.num_package --How many package?
		and package_data.num_content) --How many content in a package?
	then printf("GhenTuong: not enought parameter") return end
	
	local CACHE = {}
	local smart_data = SIMBOARD.smarts_by_names[smart]
	local location = vector():set( --Make sure it don't fall under the ground
		smart_data.position.x,
		smart_data.position.y + 1,
		smart_data.position.z
	)
	for count = 1, package_data.num_package, 1 do
		--Load content
		local content = ""
		for index = 1, package_data.num_content, 1 do
			if (index > 1) then content = content .. "," end
			content = content .. DATABASE_PACKAGE[package_data.package_type][math.random(#DATABASE_PACKAGE[package_data.package_type])]
		end
		--Create package
		local created_object = alife():create(package_data.package_name, location, smart_data.m_level_vertex_id, smart_data.m_game_vertex_id)
		if (created_object) then
			local data = stpk_utils.get_item_data(created_object)
			if (data) then
				if     (created_object:section_name() == "quest_package_1") then data.visual_name = [[dynamics\box\expl_dinamit]]
				elseif (created_object:section_name() == "quest_package_2") then data.visual_name = [[dynamics\repair\armor_repair_pro]]
				elseif (created_object:section_name() == "quest_package_3") then data.visual_name = [[dynamics\devices\dev_instrument_1\dev_instrument_1]]
				elseif (created_object:section_name() == "quest_package_4") then data.visual_name = [[dynamics\equipments\trade\kit_hunt]]
				end
				if not (content == "") then
					data.custom_data = content
				end
				stpk_utils.set_item_data(data, created_object)
			end
			CACHE[#CACHE+1] = {
				id = created_object.id,
				section_name = created_object:section_name()
			}
		end
	end
	return CACHE
end

function check_package(list, mark)
	--Check if packages are in world map and mark them in PDA
	--mark == true. Mark those packages that is still in the world map
	--True if one of them is still in world map.
	local check = true
	for index, data in pairs(list) do
		local pick_package = alife():object(data.id)
		local function check_package()
			if not (pick_package) then return false end --Doesn't exist
			if not (pick_package:section_name() == data.section_name) then return false end --section_name is not correct
			if not (pick_package.parent_id == 65535) then return false end --Not in world map
			return true
		end
		if (mark and check_package()) then
			check = false
			if (data.id and level.map_has_object_spot(data.id,"treasure_unique") == 0) then
				level.map_add_object_spot(data.id, "treasure_unique", game.translate_string(TEXT_HEADER .. "pda_package"))
			end
		else
			if (data.id and level.map_has_object_spot(data.id,"treasure_unique") == 1) then
				level.map_remove_object_spot(data.id, "treasure_unique")
			end
		end
	end
	return check
end

function package_loot_release(list, condition)
	printf("GhenTuong: Start Function| package_loot_release")
	--Count how many is in player inventory
	--condition is a list of parent_id of the packages. Release if fitted. Must be a list.
	--condition == nil => only count how many package is in player inventory
	--AC_ID is player, 65535 is world map
	if not (list) then return end
	local count = 0
	for index, data in pairs(list) do
		local pick_package = alife():object(data.id)
		if (pick_package and (pick_package:section_name() == data.section_name)) then
			--Count how many is in player inventory
			if (pick_package.parent_id == AC_ID) then count = count + 1 end
			--Release if parent_id is fitted
			if (condition and (#condition > 0)) then
				for index, data in pairs(condition) do
					if (pick_package.parent_id == data) then
						printf("GhenTuong: release %s| parent_id = %s", pick_package:name(), pick_package.parent_id)
						safe_release_manager.release(pick_package)
					end
				end
			end
		end
	end
	--Remove mark
	local remove_mark = check_package(list, false)
	return count
end

-- =============================================================
--< Precondition checker >--------------------------------------------------
xr_conditions.gt_task_precondition_check_max = function(actor, npc, p)	
	if not (p and p[1]) then return false end
	local task_giver = mob_trade.GetTalkingNpc()
	if not (task_giver) then return false end
	local squad = get_object_squad(task_giver) --Task count for squad. Not NPC.
	if not (squad) then return false end
	
	local giver_task_count = utils.load_var(db.actor, ("drx_sl_task_giver_" .. squad.id), 0)
	if (giver_task_count < MAX_TASK) then return true end
	return false
end

--< Gunship handle >--------------------------------------------------
--Stop creating "blackbox_mlr"
local GUNSHIP_BLACK_BOX = {}
function gunship_black_box_update(gunship_id)
	if not (GUNSHIP_BLACK_BOX[gunship_id]) then
		GUNSHIP_BLACK_BOX[gunship_id] = true
	end
end

mlr_utils.death_heli = function(obj, enemy_id)
	if (GUNSHIP_BLACK_BOX[obj:id()]) then
		printf("GhenTuong: stop droping 'blackbox_mlr' success")
		return
	end
	
	--//Base script// File: mlr_utils.script
		local heli_pos = obj:position()
		local heli_id = obj:id()
		local drop = alife():create('blackbox_mlr',heli_pos,obj:level_vertex_id(),obj:game_vertex_id())
end
--< Unpack package >--------------------------------------------------
tasks_delivery.itms_manager.use_package = function(obj)
	local pick_object = alife():object(obj:id())
	local data = stpk_utils.get_item_data(pick_object)
	if (data and data.custom_data) then
		local content = alun_utils.str_explode(data.custom_data,",")
		if (content and (#content > 0)) then
			printf("GhenTuong: use_package %s| %s", pick_object:name(), data.custom_data)
			txr_utils.delay_item("medkit_ai1", true, 5, obj, content)
			return
		end
	end
	
	--//Base script// File: tasks_delivery.script
	local sec = obj:section()
	local content = ini_sys:r_string_ex(sec,"content")
	if not content then return end

	local t = alun_utils.str_explode(content,",")
	local pick = {}
	for i=1,#t do
		if (#pick < 6) and (math.random(100) < 50) then
			pick[#pick+1] = t[i]
		end
	end
	pick = #pick > 1 and pick or {t[1],t[2],t[3],t[4]}
	
	txr_utils.delay_item("medkit_ai1", true, 5, obj, pick)
end