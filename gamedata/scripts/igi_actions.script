local trace_assert = igi_helper.trace_assert
local WorldState = igi_world_state.WorldState

Cache = {
	initialise_actions = function (self)
		if not self.actions then return end
		self:get_entities():resolve_and_link_table(self.actions)
	end,

	update_actions = function (self)
		if not self.actions then return end
		self.actions:update_all()
	end,
}

ActionsTable = {
	__cls = "ActionsTable",
	__types = {},

	update_all = function (self)
		for _, action in pairs(self) do
			action:update()
		end
	end,

	add_type = function (self, type, cls)
		self.__types[type] = cls
	end,
}

Action = {
	__cls = "Action",

	update = function (self)
		if self._state == "finished" then return end
		if not self:_is_ready() then return end
		local to_rerun = self:run()
		if not to_rerun then self._state = "finished" end
	end,

	_is_ready = function (self)
		return self.conditions:are_all_fulfilled()
	end,

	run = function (self)
		trace_assert(nil, "Abstract method not implemented!")
	end,
}


RepairAction = {
	__cls = "RepairAction",
	type = 'repair',

	run = function (self)
		local item = igi_helper.level_object(self.id)
		if not item then return end
		item:set_condition(self.condition/100)
	end,

	update = Action.update,
	_is_ready = Action._is_ready,
	restore_classes = Action.restore_classes,
}
ActionsTable:add_type(RepairAction.type, RepairAction.__cls)

ChangeFactionAction = {
	__cls = "ChangeFactionAction",
	type = 'change_faction',

	run = function (self)
		local se_squad = WorldState.objects[self.id]
		if not se_squad or not se_squad.squad_members then return end
		for npc in se_squad:squad_members() do
			local member = igi_helper.level_object(npc.id)
			if member then
				member:set_character_community(self.faction, 0, 0)
			end
		end
	end,

	update = Action.update,
	_is_ready = Action._is_ready,
	restore_classes = Action.restore_classes,
}
ActionsTable:add_type(ChangeFactionAction.type, ChangeFactionAction.__cls)


ConditionsTable = {
	__cls = "ConditionsTable",
	__types = {},

	are_all_fulfilled = function (self)
		for _, condition in ipairs(self) do
			if not condition:fulfilled() then return false end
		end
		return true
	end,

	add_type = function (self, type, cls)
		self.__types[type] = cls
	end,
}


IsOnlineCondition = {
	__cls = "IsOnlineCondition",
	type = 'is_online',

	_is_stalker_online = function (se_obj)
		for _,v in ipairs(db.OnlineStalkers) do
			if (v == se_obj.id) then
				return true
			end
		end
		return false
	end,

	fulfilled = function (self)
		local se_obj = WorldState.objects[self.id]
		if not se_obj then return end

		if se_obj.squad_members then
			se_obj = se_obj:squad_members()()	-- stateful iterator, returns function
			return self._is_stalker_online(se_obj)
		end
		return se_obj.online
	end,
}
ConditionsTable:add_type(IsOnlineCondition.type, IsOnlineCondition.__cls)

IsParentDeadCondition = {
	__cls = "IsParentDeadCondition",
	type = 'is_parent_dead',

	fulfilled = function (self)
		local se_obj = WorldState.objects[self.id]
		if not se_obj then return end

		local parent = WorldState.objects[se_obj.parent_id]
		return not parent:alive()
	end,
}
ConditionsTable:add_type(IsParentDeadCondition.type, IsParentDeadCondition.__cls)

IsLowCondition = {
	__cls = "IsLowCondition",
	type = 'is_low_condition',

	fulfilled = function (self)
		local item = igi_helper.level_object(self.id)
		if not item then return false end
		return item:condition() < (self.max_condition / 100)
	end,
}
ConditionsTable:add_type(IsLowCondition.type, IsLowCondition.__cls)
