TARGET_TYPES = {	-- Enum to be clear everywhere and no typos
	CONTINUOUS = "continuous",
	INSTANT = "instant",
}

function process_instant_subtasks(subtasks)
	-- Instant = instant without completed tasks
	local completed_keys = {}
	
	for k, subtask_data in pairs(subtasks.instant) do
		printf("instant subtask: "..subtask_data.target)
		local target_tbl = igi_taskdata.get_target_table(subtask_data.target)
		assert(target_tbl.is_complete, 
			"Igi Tasks: no complete functor for target "..subtask_data.target)

		if target_tbl.is_complete(subtask_data) then
			printf("complete")
			table.insert(completed_keys, k)
		else
			if target_tbl.is_failed then
				if target_tbl.is_failed(subtask_data) then return "fail" end
			end
		end
	end
	
	-- remove completed tasks
	for _, v in pairs(completed_keys) do
		subtasks.instant[v] = nil
	end
end

function check_continuous_failed(subtasks_continuous)
	for k, subtask_data in pairs(subtasks_continuous) do
		local target_tbl = igi_taskdata.get_target_table(subtask_data.target)
		local is_not_failed_functor = target_tbl.is_not_failed
		if is_not_failed_functor then
			if not is_not_failed_functor(subtask_data) then
				return true
			end
		end
	end
	return false
end

function check_continuous_running(subtasks_continuous)
	for k, subtask_data in pairs(subtasks_continuous) do
		local target_tbl = igi_taskdata.get_target_table(subtask_data.target)
		local is_ready_functor = target_tbl.ready_to_finish
		assert(is_ready_functor, 
			"Igi Tasks: no ready functor for target "..subtask_data.target)
		
		if not is_ready_functor(subtask_data) then
			return true
		end
	end
	return false
end

function finish_continuous_subtasks(subtasks_continuous, is_complete)
	for _, subtask_data in pairs(subtasks_continuous) do
		local target_tbl = igi_taskdata.get_target_table(subtask_data.target)
		local complete_functor = target_tbl.finish_subtask
		local fail_functor = target_tbl.fail_subtask
		-- printf("Igi: subtask finish: "..subtask_data.section_name..tostring(subtask_data.id))
		
		if is_complete and complete_functor then 
			complete_functor(subtask_data)
		elseif not is_complete and fail_functor then
			fail_functor(subtask_data)
		end
	end
end
---------------------------------------------------
local function basic_quest_target(obj_data)
	local target_tbl = igi_taskdata.get_target_table(obj_data.target)
	local is_ready = target_tbl.ready_to_finish
	if not is_ready(obj_data) then return obj_data.id end
end

function quest_target(subtasks, CACHE)
	local is_nothing = false
	_, target_obj = next(subtasks.instant)
	
	if target_obj then
		return target_obj.id
	else
		local no_target
		for _, subtask_data in pairs(subtasks.continuous) do
			local target_tbl = igi_taskdata.get_target_table(subtask_data.target)
			local target
			if target_tbl.quest_target then
				target = target_tbl.quest_target(subtask_data, CACHE)
			else
				target = basic_quest_target(subtask_data)
			end
			
			-- use -1 if no target must be given
			if target and target == -1 then
				no_target = -1
			elseif target and target ~= -1 then
				return target
			end
		end
		return no_target
	end
end
---------------------------------------------------
function setup_subtask(targets)
	-- prepare_targets(targets)
	local subtasks = {
		instant = {},
		continuous = {},
	}
	for id, entity in pairs(targets) do
		if entity.target then
			local target_tbl = igi_taskdata.get_target_table(entity.target)
			local target_type = target_tbl.TYP
			printf(entity.target.."added to "..target_type)
			subtasks[target_type][id] = entity
		end
	end

	return subtasks
end
---------------------------------------------------
local function update_mark(obj_data, mark_type)
	--printdbg("Igi: Spot in world: "..tostring(igi_helper.object_in_world(obj_data.se_obj)).." spot: "..tostring(level.map_has_object_spot(obj_data.id, mark_type)))
	if igi_helper.object_in_world(igi_helper.alife_obj(obj_data.id)) then
		if level.map_has_object_spot(obj_data.id, mark_type) == 0 then
			level.map_add_object_spot(obj_data.id, mark_type, game.translate_string(igi_db.TEXT_HEADER .. mark_type))
		end
	else
		if level.map_has_object_spot(obj_data.id, mark_type) == 1 then
			level.map_remove_object_spot(obj_data.id, mark_type)
		end
	end
end

function update_marks(entities)
	local marks = {
		item = "treasure_unique",
	}
	
	for entity_name, entity in pairs(entities) do
		local mark = marks[string.match(entity_name, "%$(%D+)_")]
		if mark and not entity.not_on_map then
			update_mark(entity, mark)
		end
	end
end

function unmark_all(entities)
	local marks = {
		item = "treasure_unique",
	}
	
	for entity_name, entity in pairs(entities) do
		local mark = marks[string.match(entity_name, "%$(%D+)_")]
		if mark then
			level.map_remove_object_spot(entity.id, mark)
		end
	end
end
