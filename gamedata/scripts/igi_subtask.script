function process_instant_subtasks(subtasks)
	-- Instant = instant without completed tasks
	for k, subtask_data in pairs(subtasks.instant) do
		if subtask_data.functor(subtask_data) then
			subtasks.instant[k] = nil
		end
	end
end

function check_continuous_failed(subtasks_continuous)
	-- Returns false, if at least one condition is failed;
	-- Continuous objectives will be completed with task end and can be failed

	-- If functor of continuous not true - mission fail
	for k, subtask_data in pairs(subtasks_continuous) do
		if not subtask_data.functor(subtask_data) then
			return true
		end
	end
	return false
end

function check_continuous_running(subtasks_continuous)
	-- If functor of continuous not true - mission fail
	for k, subtask_data in pairs(subtasks_continuous) do
		if not (subtask_data.ready_functor and subtask_data.ready_functor(subtask_data)) then
			return true
		end
	end
	return false
end

function finish_continuous_subtasks(subtasks_continuous, is_complete)
	for _, subtask_data in pairs(subtasks_continuous) do
		if is_complete then subtask_data.finish_function(subtask_data)
		elseif not is_complete and subtask_data.fail_function then
			subtask_data.fail_function(subtask_data)
		end
	end
end
---------------------------------------------------
function quest_target(subtasks)
	if not subtasks or 
			not(subtasks.instant and subtasks.continuous) then
		return end

	_, target_obj = next(subtasks.instant)
	if not target_obj then
		for _, objective_data in pairs(subtasks.continuous) do
			-- If ready_functor exist and is task is not ready => do it
			target_obj = objective_data.ready_functor and not objective_data.ready_functor(objective_data) and objective_data
			if target_obj then break end
		end
	end
	return target_obj and target_obj.id
end
---------------------------------------------------
local function sort_subtasks(subtasks)
	local instant_objective = {
		["kill"] = igi_helper.object_not_exist,
		["get"] = igi_helper.object_in_player_inv,
	}
	-- function for task to not fail, 
	-- function to call on quest finish,
	-- function to check if task is ready to finish,
	-- (optional) function to call on quest fail
	local continuous_objective = {
		["return"] = {igi_helper.object_exist, igi_helper.deliver_item, igi_helper.object_in_player_inventory},
	}

	local sorted_tasks = {
		instant = {},
		continuous = {},
	}
	for k, condition_data in pairs(subtasks) do
		local target = condition_data.target
		if instant_objective[target] then
			condition_data.functor = instant_objective[target]
			table.insert(sorted_tasks.instant, condition_data)
		elseif continuous_objective[target] then
			condition_data.functor = continuous_objective[target][1]
			condition_data.finish_function = continuous_objective[target][2]
			condition_data.ready_functor = continuous_objective[target][3]
			condition_data.fail_function = continuous_objective[target][4]
			table.insert(sorted_tasks.continuous, condition_data)
		end
		condition_data.target = nil
	end

	return sorted_tasks
end

function setup_subtask(targets)
	local subtasks = {}
	for id, entity in pairs(targets) do
		if entity.target then
			subtasks[#subtasks + 1] = entity
		end
	end

	return sort_subtasks(subtasks)
end
---------------------------------------------------
local function update_mark(obj_data, mark_type)
	--printdbg("Igi: Spot in world: "..tostring(igi_helper.object_in_world(obj_data.se_obj)).." spot: "..tostring(level.map_has_object_spot(obj_data.id, mark_type)))
	if igi_helper.object_in_world(obj_data.se_obj) then
		if level.map_has_object_spot(obj_data.id, mark_type) == 0 then
			level.map_add_object_spot(obj_data.id, mark_type, game.translate_string(igi_db.TEXT_HEADER .. mark_type))
		end
	else
		if level.map_has_object_spot(obj_data.id, mark_type) == 1 then
			level.map_remove_object_spot(obj_data.id, mark_type)
		end
	end
end

function update_marks(entities)
	local marks = {
		["package"] = "treasure_unique",
		["item"] = "item_misc",
	}
	
	for entity_name, entity in pairs(entities) do
		local mark = marks[string.match(entity_name, "%$(%D+)_")]
		if mark then
			update_mark(entity, mark)
		end
	end
end

function unmark_all(entities)
	local marks = {
		["package"] = "treasure_unique",
		["item"] = "item_misc",
	}
	
	for entity_name, entity in pairs(entities) do
		local mark = marks[string.match(entity_name, "%$(%D+)_")]
		if mark then
			level.map_remove_object_spot(entity.id, mark)
		end
	end
end
