-- =============================================================
--	Quest function (gt_task_mutant.script)
--	Anomaly 1.5.5.0
--	GhenTuong
-- =============================================================
local TEXT_HEADER = "gt_task_text_"
local TEXT_TASK = "mutant_"
local DATABASE_REWARD = { --Reward
	["s"] = 16000,
	["a"] = 12000,
	["b"] = 9000,
	["c"] = 6000,
}
local SETUP_TASK_CACHE = {} --CACHE to setup task
--SETUP_TASK_CACHE[task_id] = {
--	["setup"]
--	["smart"]
--	}
-- =============================================================
function get_target_descript(p)
	local CACHE = p
	local function text_line(name, detail)
		return "%c[d_orange]" .. name .. ": " .. "%c[0,255,255,255]" .. detail
	end
	--Rank
	local text_rank = text_line(
		game.translate_string(TEXT_HEADER .. "rank"),
		game.translate_string(TEXT_HEADER .. "rank" .. "_" .. CACHE["setup"].rank))
	--Target
	local text_target = text_line(
		game.translate_string(TEXT_HEADER .. "target"),
		game.translate_string(TEXT_HEADER .. CACHE["setup"].name))
	--Location (be defined in st_smart_names.xml)
	local text_location = text_line(
		game.translate_string(TEXT_HEADER .. "location"),
		game.translate_string("st_" .. CACHE["smart"] .. "_name"))
	
	--Combine all the texts
	local news_text = text_rank .. "\\n " .. text_target .. "\\n " .. text_location
	return news_text
end

--< Effect >--------------------------------------------------
xr_effects.gt_task_mutant_setup = function(actor,npc,p)
	--This function will be called on_job_descr
	--p[1] is task id
	if not (p and p[1]) then return false end
	--Setup
	local task_id = p[1]
	local CACHE = {} --same as SETUP_TASK_CACHE
	--Didn't setup yet?
	if not (SETUP_TASK_CACHE[task_id]) then
		CACHE["task_giver_faction"] = character_community(mob_trade.GetTalkingNpc())
		CACHE["setup"] = gt_task_general.get_mutant_data_setup()
		CACHE["smart"] = gt_task_general.get_smart_terrain_setup(2)
		--Store setup
		SETUP_TASK_CACHE[task_id] = CACHE
	--Already setuped?
	else CACHE = SETUP_TASK_CACHE[task_id] end
	
	--Give message
	local postpone_intel = {
		caption = game.translate_string(TEXT_HEADER .. TEXT_TASK .. "title"),
		text = get_target_descript(CACHE),
		icon = CACHE["setup"].icon
	}
	--Print the message
	local function postpone_function(intel)
		db.actor:give_talk_message2(intel.caption, intel.text, intel.icon, "iconed_answer_item")
		return true
	end
	CreateTimeEvent(0, "gt_task_mutant_setup", 0, postpone_function, postpone_intel)
end
--< Status >--------------------------------------------------
task_status_functor.gt_task_mutant_status = function (tsk,task_id)
	if not (db.actor and tsk) then return end
	if (tsk.stage == 1) then return end --completed
	
	local CACHE = utils.load_var(db.actor, task_id)
	--First run. Init task
	if not (CACHE) then
		if not (SETUP_TASK_CACHE[task_id]) then printf("GhenTuong: %s| Can not init in first run.", task_id) return "fail" end
		CACHE = SETUP_TASK_CACHE[task_id]
		utils.save_var(db.actor, task_id, CACHE)
	end
	
	--Create target
	if not (CACHE["target"]) then
		CACHE["target"] = gt_task_general.create_squad_at_smart(CACHE["setup"].squad, CACHE["smart"])
		--Check if creating is success
		if not (CACHE["target"])
		then printf("GhenTuong: %s| Creating target fail.", task_id) return "fail" end
		utils.save_var(db.actor, task_id, CACHE)
	end
	--Check if target is alive
	local target_squad = alife():object(CACHE["target"].id)
	local target_is_alive = target_squad and (target_squad:section_name() == CACHE["target"].section_name)
	if not target_is_alive then
		tsk.stage = 1
	end
end
--< Target >--------------------------------------------------
task_functor.gt_task_mutant_target = function(task_id,field,p,tsk)
	--This function point to a task target in PDA
	if not (db.actor and tsk) then return end
	if (tsk.stage == 1 and tsk.task_giver_id) then return tsk.task_giver_id end
	local CACHE = utils.load_var(db.actor,task_id)
	if not (CACHE) then return end
	return CACHE["target"].id
end
--< Text >--------------------------------------------------
task_functor.gt_task_mutant_text = function(task_id,field,p,tsk)
	--This function return a text for title_functor and descr_functor
	if not (db.actor) then return "" end
	if (field == "title") then
		return game.translate_string(TEXT_HEADER .. TEXT_TASK .. "title") or ""
	elseif (field == "descr") then
		local CACHE = utils.load_var(db.actor,task_id)
		if not (CACHE) then return "" end
		local text = ""
		if (tsk.stage == 1) then
			text = game.translate_string(TEXT_HEADER .. "done")
		else
			text = game.translate_string(TEXT_HEADER .. TEXT_TASK .. "descr")
		end
		return (text .. "\\n " .. get_target_descript(CACHE)) or ""
	end
end
--< Reward >--------------------------------------------------
xr_effects.gt_task_mutant_finish = function(actor,npc,p)
	if not (p and p[1] and p[2]) then return end
	local task_id = p[1]
	local is_completed = p[2]
	local CACHE = utils.load_var(db.actor, task_id)
	--Reward money
	if (is_completed) then
		local sum_money = DATABASE_REWARD[CACHE["setup"].rank]
		local money = {tostring(sum_money), tostring(sum_money+1000)}
		xr_effects.reward_random_money(a, b, money)
		xr_effects.inc_task_stage(a, b, {task_id})
	end
	--Goodwill
	if (is_completed and CACHE and CACHE["task_giver_faction"]) then
		xr_effects.complete_task_inc_goodwill(a, b, {50,CACHE["task_giver_faction"]})
	else
		xr_effects.fail_task_dec_goodwill(a, b, {25,CACHE["task_giver_faction"]})
	end
	--Release
	gt_task_general.release_squad(CACHE["target"])
	--Reset stored data
	utils.save_var(db.actor, task_id, nil)
	--Finish
	xr_effects.drx_sl_unregister_task_giver(a, b, {task_id})
	xr_effects.drx_sl_reset_stored_task(a, b, {task_id})
end