-- =============================================================
--	Quest function (gt_task_artifact_stalker.script)
--	Anomaly 1.5.5.0
--	GhenTuong
-- =============================================================
local TEXT_HEADER = "gt_task_text_"
local TEXT_TASK = "artifact_stalker_"
local SETUP_TASK_CACHE = {} --CACHE to setup task
--SETUP_TASK_CACHE[task_id] = {
--	["setup"]
--	["smart"]
--	}
-- =============================================================
function get_target_descript(p)
	local CACHE = p
	local function text_line(name, detail)
		return "%c[d_orange]" .. name .. ": " .. "%c[0,255,255,255]" .. detail
	end
	--Target
	local text_target = text_line(
		game.translate_string(TEXT_HEADER .. "target"),
		game.translate_string(TEXT_HEADER .. "artifact"))
	--Faction
	local text_faction = text_line(
		game.translate_string(TEXT_HEADER .. "faction"),
		game.translate_string(CACHE["setup"].enemy.faction) .. " - " .. CACHE["setup"].enemy.name)
	--Location
	local text_location = text_line(
		game.translate_string(TEXT_HEADER .. "location"),
		game.translate_string(CACHE["setup"].enemy.level))
	--Combine all the texts
	local news_text = text_target .. "\\n " .. text_faction .. "\\n " .. text_location
	return news_text
end

--< Precondition checker >--------------------------------------------------
xr_conditions.gt_task_artifact_stalker_precondition = function(actor,npc,p)
	if (gt_task_general.get_artifact_stalker_data_setup()) then return true end
	return false
end
--< Effect >--------------------------------------------------
xr_effects.gt_task_artifact_stalker_setup = function(actor,npc,p)
	--This function will be called on_job_descr
	--p[1] is task id
	if not (p and p[1]) then return false end
	--Setup
	local task_id = p[1]
	local CACHE = {} --same as SETUP_TASK_CACHE
	--Didn't setup yet?
	if not (SETUP_TASK_CACHE[task_id]) then
		CACHE["task_giver_faction"] = character_community(mob_trade.GetTalkingNpc())
		CACHE["setup"] = gt_task_general.get_artifact_stalker_data_setup()
		SETUP_TASK_CACHE[task_id] = CACHE
	--Already setuped?
	else CACHE = SETUP_TASK_CACHE[task_id] end
	
	--Give message
	local postpone_intel = {
		caption = game.translate_string(TEXT_HEADER .. TEXT_TASK .. "title"),
		text = get_target_descript(CACHE),
		icon = "ui_inGame2_Kontrakt_s_uchenimi"
	}
	--Print the message
	local function postpone_function(intel)
		db.actor:give_talk_message2(intel.caption, intel.text, intel.icon, "iconed_answer_item")
		return true
	end
	CreateTimeEvent(0, "gt_task_artifact_stalker_setup", 0, postpone_function, postpone_intel)
end
--< Status >--------------------------------------------------
task_status_functor.gt_task_artifact_stalker_status = function (tsk,task_id)
	if not (db.actor and tsk) then return end
	if (tsk.stage == 1) then return "complete" end --completed
	
	local CACHE = utils.load_var(db.actor, task_id)
	--First run. Init task
	if not (CACHE) then
		if not (SETUP_TASK_CACHE[task_id]) then printf("GhenTuong: %s| Can not init in first run.", task_id) return "fail" end
		CACHE = SETUP_TASK_CACHE[task_id]
		utils.save_var(db.actor, task_id, CACHE)
	end
	
	--Create target
	if not (CACHE["target"]) then
		CACHE["target"] = CACHE["setup"].artifact
		--Check if creating is success
		if not (CACHE["target"]) then printf("GhenTuong: %s| Creating target fail.", task_id) return "fail" end
		--Make squad stay still
		local artifact = CACHE["target"].id and alife():object(CACHE["target"].id)
		local squad = artifact.parent_id and alife():object(artifact.parent_id)
		if (squad) then
			squad.stay_time = game.get_game_time()
			squad.force_online = true
		end
		utils.save_var(db.actor, task_id, CACHE)
	end
	
	local sv_object = CACHE["target"].id and alife():object(CACHE["target"].id)
	--Complete if artifact is no longer exist
	if not (sv_object and (CACHE["target"].section_name == sv_object:section_name())) then return "complete" end
	--Complete if parent_id change
	if not (sv_object.parent_id and (sv_object.parent_id == CACHE["target"].parent_id)) then return "complete" end
	return
end
--< Target >--------------------------------------------------
task_functor.gt_task_artifact_stalker_target = function(task_id,field,p,tsk)
	--This function point to a task target in PDA
	if not (db.actor and tsk) then return end
	if (tsk.stage == 1 and tsk.task_giver_id) then return tsk.task_giver_id end
	local CACHE = utils.load_var(db.actor,task_id)
	if not (CACHE) then return end
	return CACHE["target"].parent_id
end
--< Text >--------------------------------------------------
task_functor.gt_task_artifact_stalker_text = function(task_id,field,p,tsk)
	--This function return a text for title_functor and descr_functor
	if not (db.actor) then return "" end
	if (field == "title") then
		return game.translate_string(TEXT_HEADER .. TEXT_TASK .. "title") or ""
	elseif (field == "descr") then
		local CACHE = utils.load_var(db.actor,task_id)
		if not (CACHE) then return "" end
		local text = ""
		if (tsk.stage == 1) then
			text = game.translate_string(TEXT_HEADER .. "done")
		else
			text = game.translate_string(TEXT_HEADER .. TEXT_TASK .. "descr")
		end
		return (text .. "\\n " .. get_target_descript(CACHE)) or ""
	end
end
--< Reward >--------------------------------------------------
xr_effects.gt_task_artifact_stalker_finish = function(actor,npc,p)
	if not (p and p[1] and p[2]) then return end
	local task_id = p[1]
	local is_completed = p[2]
	local CACHE = utils.load_var(db.actor, task_id)
	if (is_completed) then
		xr_effects.inc_task_stage(a, b, {task_id})
	end
	--Reset stored data
	utils.save_var(db.actor, task_id, nil)
	--Finish
	xr_effects.drx_sl_unregister_task_giver(a, b, {task_id})
	xr_effects.drx_sl_reset_stored_task(a, b, {task_id})
end