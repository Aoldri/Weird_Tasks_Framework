
local igi_linker = igi_linker
local igi_macros = igi_macros
local trace_dbg = igi_helper.trace_dbg

function has_link_or_macro(str)
	return igi_linker.has_dependency(str) or igi_macros.has_macro(str)
end

function convert_strings_type(tbl)
	for k,v in pairs(tbl) do
		if type(v) == "string" then
			if tonumber(v) then
				tbl[k] = tonumber(v)
			elseif v == "true" then
				tbl[k] = true
			elseif v == "false" then
				tbl[k] = false
			end
		elseif type(v) == "table" then
			convert_strings_type(v)
		end
	end
end

function resolve_unlinked_macros(tbl)
	local has_changed = false
	for k,v in pairs(tbl) do
		if type(v) == 'table' then
			if resolve_unlinked_macros(v) then
				has_changed = true
			end
		elseif type(v) == 'string' and igi_macros.has_macro(v)
				and not igi_linker.has_dependency(v) then
			tbl[k] = igi_macros.resolve_all_macros(v)
			has_changed = true
		end
	end
	return has_changed
end

local function find_resolve_self_references(tbl, this_entity)
	local changes_made = false
	for k,v in pairs(tbl) do
		if type(v) == 'string' and not string.find(k, "link") then
			local new_str = v
			for dep in igi_linker.dependency_iterator(v) do
				local dep = igi_linker.Dependency.from(dep, this_entity)
				if not dep:is_resolvable() then
					new_str = dep:resolve_in_string(new_str)
					changes_made = true
				end
			end
			tbl[k] = new_str
		elseif type(v) == 'table' then
			if find_resolve_self_references(v, this_entity) then
				changes_made = true
			end
		end
	end
	return changes_made
end

function process_unlinked_entity(entity)
	local has_changed = true
	trace_dbg('apc', entity)
	while has_changed do
		has_changed = false
		has_changed = resolve_unlinked_macros(entity) or has_changed
        has_changed = find_resolve_self_references(entity, entity) or has_changed
	end
	convert_strings_type(entity)
end

local function collect_free_dependencies(str, this_entity, dest)
	for macro in igi_macros.macro_iterator(str) do
		str = str:gsub(igi_utils.escape_pattern(macro), "/macro/")
		collect_free_dependencies(macro, this_entity, dest)
	end

	for dep in igi_linker.dependency_iterator(str) do
		trace_dbg('dep', dep, dep:find("/macro/"))
		if not dep:find("/macro/") then
			dest[#dest+1] = igi_linker.Dependency.from(dep, this_entity)
		end
	end

	return dest
end

local function resolve_free_dependencies (tbl, this_entity, entities)
	local has_changes = false
	for k,v in pairs(tbl) do
		if type(v) == "table" then
			if resolve_free_dependencies(v, this_entity, entities) then
				has_changes = true
			end

		elseif type(v) == "string" then
			local deps = collect_free_dependencies(v, this_entity, {})
			for _, dep in pairs(deps) do
				trace_dbg(dep:get_original())
				if dep:is_resolvable(entities) then
					trace_dbg('resolvable')
					local resolved = dep:resolve(entities)
					if not igi_macros.has_macro(resolved) then
						tbl[k] = v:gsub(dep:get_original(true), resolved)
						has_changes = true
					end
				end
			end
		end
	end
	return has_changes
end

function resolve_unlinked_macros_and_link_virtual_variables(entities)
	local has_changed = true
	while has_changed do
		has_changed = false
		for _, entity in pairs(entities) do
			has_changed = resolve_unlinked_macros(entity) or has_changed
			has_changed = resolve_free_dependencies(entity, entity, entities) or has_changed
		end
	end
	convert_strings_type(entities)
end
