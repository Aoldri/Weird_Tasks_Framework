
local igi_linker = igi_linker
local igi_macros = igi_macros
local trace_dbg = igi_helper.trace_dbg

function resolve_unlinked_macros_and_link_virtual_variables(entities)
	local has_changed = true
	while has_changed do
		has_changed = false
		for _, entity in pairs(entities) do
			has_changed = resolve_unlinked_macros(entity) or has_changed
			has_changed = resolve_free_dependencies(entities, entity, entity) or has_changed
		end
	end
	convert_strings_type(entities)
end

function resolve_free_dependencies(entities, current_entity, tbl)
	local has_changes = false
	for k,v in pairs(tbl) do
		if type(v) == "table" then
			if resolve_free_dependencies(entities, current_entity, v) then
				has_changes = true
			end

		elseif type(v) == "string" then
			for dep in igi_linker.free_dependency_iterator(v) do
				trace_dbg("Resolve free dependency", dep)
				local link = igi_linker.Link.from(dep, current_entity)
				local resolved = link:resolve(entities)
				if resolved and not igi_macros.has_macro(resolved) then
					tbl[k] = v:gsub(igi_utils.escape_pattern(dep), resolved)
					has_changes = true
				end
			end
		end
	end
	return has_changes
end

function resolve_and_link_table(tbl, entities)
	local has_changed = true
	while has_changed do
		has_changed = resolve_free_dependencies(entities, nil, tbl)
		has_changed = resolve_unlinked_macros(tbl) or has_changed
	end
	convert_strings_type(tbl)
end

function resolve_macros_and_self_references(entity)
	local changes = true
	while changes do
		changes = find_resolve_self_references(entity, entity)
		changes = resolve_unlinked_macros(entity) or changes
	end
	convert_strings_type(entity)
end

function find_resolve_self_references(entity, tbl)
	local changes_made = false
	for k,v in pairs(tbl) do
		if type(v) == 'string' then
			local new_str = igi_linker.resolve_dependencies(v, entity)
			if new_str ~= v then
				tbl[k] = new_str
				changes_made = true
			end
		elseif type(v) == 'table' then
			if find_resolve_self_references(entity, v) then
				changes_made = true
			end
		end
	end
	return changes_made
end

function convert_strings_type(tbl)
	for k,v in pairs(tbl) do
		if type(v) == "string" then
			if tonumber(v) then
				tbl[k] = tonumber(v)
			elseif v == "true" then
				tbl[k] = true
			elseif v == "false" then
				tbl[k] = false
			end
		elseif type(v) == "table" then
			convert_strings_type(v)
		end
	end
end

function resolve_unlinked_macros(tbl)
	local has_changed = false
	for k,v in pairs(tbl) do
		if type(v) == 'table' then
			if resolve_unlinked_macros(v) then
				has_changed = true
			end
		elseif type(v) == 'string' and igi_macros.has_macro(v)
				and not igi_linker.has_dependency(v) then
			tbl[k] = igi_macros.Macro.resolve_in_str(v)
			has_changed = true
		end
	end
	return has_changed
end
