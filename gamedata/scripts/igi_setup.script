
local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end

function actor_on_first_update()
	igi_models.add_interface_implementation('Entity', Entity)
	igi_models.add_interface_implementation("Cache", Cache)

	igi_taskdata.add_classification_rule(function (CACHE)
		if not CACHE.setup then return end
		igi_models.set_class(CACHE.setup, igi_target.EntitiesTable.__cls)
		for _, v in pairs(CACHE.setup) do
			igi_models.set_class(v, 'Entity')
		end
	end)
end

Cache = {
	_get_setup = function (self)
		return self.setup
	end,

	relink_setup = function (self)
		local tmp = {}
		for _, entity in pairs(self.setup) do
			tmp[#tmp+1] = entity
		end

		empty_table(self.setup)
		for _, entity in pairs(tmp) do
			self.setup[entity:get_link()] = entity
		end
	end,

	setup_entities = function (self)
		trace_dbg("finalized CACHE", self)

		for _, entity in pairs(self.setup) do
			trace_dbg('setup group '..tostring(_), entity)
			if not entity:setup_group() then return end
			trace_dbg('group_data', entity)
		end
		self:relink_setup()
		return true
	end,
}

Entity = {
	add_preset_values = function (self, preset)
		for k, v in pairs(preset) do
			self[k] = self[k] or v
		end
	end,

	setup_group = function (self)
		local target_tbl = self:get_target_table()
		return target_tbl["setup_"..self.entity_type](self)
	end
}

------------------------------------------------

function setup_quest(task_id)
	trace_dbg("setup "..task_id)
	igi_random.set_seed(task_id)

	local CACHE = igi_models.Cache.from(igi_taskdata.get_task_data(task_id))
	CACHE:set_task_id(task_id)

	CACHE.disabled = nil	-- not needed anymore
	CACHE.preconditions = nil	-- not needed

	if not CACHE:setup_entities() then return end
	trace_dbg("CACHE after setup "..task_id, CACHE)
	return CACHE
end


