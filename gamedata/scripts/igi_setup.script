-- Main setup function for all quests

------------------------------------------------
-- Object finder functions

local function is_online(object)	-- TODO: rename
	player_level_id = igi_helper.get_object_level_id(db.player)
	object_level_id = igi_helper.get_object_level_id(object)
	return player_level_id == object_level_id
end

local function is_nearby(object)
	local level = igi_helper.get_object_level(object)
	if not level then return false end
	return string.find(simulation_objects.config:r_value(level.name(), "target_maps", 0, ""), level)
end

local function is_on_blacklisted_map(object, sim, gg)
	object_lvl = igi_helper.get_object_level(object, sim, gg)
	local blacklisted_maps = igi_db.TableView.new("blacklist.ltx", "maps")
	if blacklisted_maps[object_lvl] then return true
	else return false end
end

local function has_ending_in_list(object, ending_list)
	if not ending_list then return nil end
	local sec = object:section_name()
	
	for _, ending in pairs(ending_list:as_table()) do
		if string.find(sec, ending) then
			return true end
	end
	return false
end

local function object_in_world(se_obj)
	return se_obj and se_obj.parent_id == 65535
end

local function object_in_npc_inventory(se_obj)
	if not se_obj then return end
	return igi_helper.check_common_npc(se_obj.parent_id)
end

local function check_object_by_args(se_object, args)
	assert((args.in_npc_inv and not args.in_world) or not args.enemy_to, 
			"Igi: Check object: enemy but not in_npc_inv")
			
	printf("Check started")
	utils_data.print_table(args, "args")

	if args.in_world and object_in_npc_inventory(se_object) or
			args.in_npc_inv and 
			(object_in_world(se_object) or not 
				igi_helper.check_common_npc(se_object.parent_id)) then
		return false 
	end
	if args.only_enemies then
		local my_faction = igi_helper.get_community(args.enemy_to or db.actor)
		local npc_faction = igi_helper.get_community(igi_helper.alife_obj(se_object.parent_id))

		if npc_faction == "monolith" then return false end
		if not game_relations.is_factions_enemies(my_faction, npc_faction) then
			return false
		end
	end
	if args.is_online and not is_online(se_object) then
		return false 
	end
	if args.is_nearby and not is_nearby(se_object) then
		return false
	end
	return true
end

local item_names_cache = {}
local item_endings_cache = {}
local function get_item_names()
	-- there are many IO calls so we cache this function (cache resets on level change)
	-- I think I want to check function time cached vs uncached
	if next(item_names_cache) then return item_names_cache, item_endings_cache end

	local name_sections = igi_db.TableView.new("item_types.ltx", "igi_item_types_sections")
	local endings_sections = igi_db.TableView.new("endings.ltx", "igi_endings_sections")

	for _, section in pairs(name_sections:as_table()) do
		local name_set = igi_db.TableView.new("item_types.ltx", section):as_set()
		item_names_cache[section] = name_set 
	end

	for _, section in pairs(endings_sections:as_table()) do
		local name_set = igi_db.TableView.new("endings.ltx", section):as_set()
		item_endings_cache[section] = name_set
	end
	--utils_data.print_table(item_names_cache, "item_names")
	--utils_data.print_table(item_endings_cache, "item_endings")
	return item_names_cache, item_endings_cache
end

local function find_set_of_name(sec_name)
	local item_names, item_endings = get_item_names()
	local actual_name = sec_name
	local ending_section
	
	for section, endings in pairs(item_endings) do
		for ending, _ in pairs(endings) do
			if string.find(sec_name, ending) then
				actual_name = string.gsub(sec_name, ending, "")
				ending_section = section
				break
			end
		end
	end
	for section, name_set in pairs(item_names) do
		if name_set[actual_name] then
			return section, ending_section
		end
	end
end

local function sort_objects()	-- ARGS!
	-- Well, this slow shit func makes what it need to make the most slow way possible
	local obj_lists = {}
	local endings_obj_lists = {}
	local name_sets = get_item_names()

	for id=1, 65534 do
		local se_obj = igi_helper.alife_obj(id)
		if se_obj then
			local name_set, ending_section = find_set_of_name(se_obj:section_name())
			if name_set and ending_section then
				if not endings_obj_lists[name_set] then 
					endings_obj_lists[name_set] = {}
				end
				
				if not endings_obj_lists[name_set][ending_section] then
					endings_obj_lists[name_set][ending_section] = {}
				end
				
				table.insert(endings_obj_lists[name_set][ending_section], se_obj)
			elseif name_set then
				if not obj_lists[name_set] then
					obj_lists[name_set] = {}
				end
				
				table.insert(obj_lists[name_set], se_obj)
			end
		end
	end

	return obj_lists, endings_obj_lists
end

local objects_cache = {}
local ending_objects_cache = {}
local function renew_objects_cache()
	printf("Igi: renewing")
	objects_cache, ending_objects_cache = sort_objects()

	local cur_time = game.get_game_time()
	local dt = game.CTime()
	dt:setHMS(0,1,0)	-- 1 minute from current time
	objects_cache.expire_time = cur_time + dt
	ending_objects_cache.expire_time = cur_time + dt
end

local function get_items_of_type(typ)
	-- renew if cache is expired
	if not (objects_cache.expire_time and objects_cache.expire_time > game.get_game_time()) then
		renew_objects_cache()
	end
	
	return objects_cache[typ]
end

local function get_ending_items_of_type(typ, ending)
	if not (ending_objects_cache.expire_time and ending_objects_cache.expire_time > game.get_game_time()) then
		renew_objects_cache()
	end
	
	return ending_objects_cache[typ] and ending_objects_cache[typ][ending]
end

local function filter_by_args(items_pool, args)
	for k, se_obj in pairs(items_pool) do
		if not check_object_by_args(se_obj, args) then
			items_pool[k] = nil
		end
	end

	return items_pool
end

local function get_items_by_args(typ, args, ending, only_ending)
	local items_pool = {}
	assert(ending or not only_ending, "Igi: setup: only_ending but no ending")
	if not only_ending then
		local items_of_typ = get_items_of_type(typ)
		igi_utils.extend_list(items_pool, items_of_typ)
	end
	
	if ending then
		local ending_items = get_ending_items_of_type(typ, ending)
		igi_utils.extend_list(items_pool, ending_items)
	end
	
	return filter_by_args(items_pool, args)
end
------------------------------------------------
local function get_faction_enemies(faction, --[[optional]] monolith_included)
	monolith_included = monolith_included or false
	local enemies_set = {}
	factions = igi_db.TableView.new('squad_base.ltx', 'guard')
	
	for enemy_faction in pairs(factions:as_table()) do
		if (game_relations.is_factions_enemies(faction, enemy_faction)) then
			if (enemy_faction ~= "monolith" or monolith_included) then
				enemies_set[enemy_faction] = true
			end
		end
	end
	return enemies_set
end

local function get_faction_setup()	-- TODO: implement factions
	-- This function returns target character factions for all possible quests
	-- Quest by himself decides, which character(s) to use
	
	local faction_list = {
		["actor"] = 'stalker',		-- default values is 'stalker', will be changed if possible
		["task_giver"] = 'stalker',
		["client"] = 'stalker',
		["enemy"] = 'stalker',
	}
	
	local task_giver = mob_trade.GetTalkingNpc()
	faction_list["task_giver"] = character_community(task_giver)
	faction_list["actor"] = character_community(db.actor)
	
	local player_enemies = get_faction_enemies(faction_list['actor'])
	local task_giver_enemies = get_faction_enemies(faction_list["task_giver"])
	
	-- set enemy - must be enemy for both player and task giver
	tmp_enemies = {}	
	for faction in pairs(player_enemies) do					-- search for enemies of both player and task giver
		if task_giver_enemies[faction] then
			tmp_enemies[#tmp_enemies + 1] = faction
		end
	end
	if (#tmp_enemies == 0) then printf("GhenTuong: player and task giver doesn't share enemies") end
	faction_list["enemy"] = tmp_enemies[math.random(#tmp_enemies)] or "stalker"
	
	-- set client - must be enemy for enemy and not enemy with task giver; can be player's faction
	local enemy_enemies = get_faction_enemies(faction_list["enemy"])
	tmp_enemies = {}
	for faction in pairs(enemy_enemies) do
		if(faction ~= faction_list["task_giver"] and task_giver_enemies[faction] == nil) then
			tmp_enemies[#tmp_enemies + 1] = faction
		end
	end
	if (#tmp_enemies == 0) then printf("GhenTuong: can't setup client") end
	faction_list["client"] = tmp_enemies[math.random(#tmp_enemies)] or "stalker"
	return faction_list
end

------------------------------------------------
local function init_constructor(task_name)
	local constructor = {}
	local tbl = igi_tasks[task_name] and igi_tasks_dbg[task_name]
	copy_table(constructor, tbl)
	constructor = igi_helper.scale_to_rank(constructor)
	constructor = igi_linker.assign_group_id(constructor)
	return constructor
end

local function setup_squad(squad_info, factions)
	--printf("SQUAD START")
	local squads = assert(igi_db.TableView.new("squad_base.ltx", squad_info.type),
			"Igi: setup squad: Unknown squad type")

	local squad_name
	local squad_type
	local faction

	if string.find(squad_info.type, "mutant") then
		squad_name, squad_type = squads:random()
	else
		assert(squad_info.faction or squad_info.faction_type, "Igi: setup_squad: No faction data")
		faction = squad_info[squad_info.faction] or factions[squad_info.faction_type]
		squad_name = squads[faction]
	end

	assert(squad_name, "Igi: setup_squad: Unable to set squad_name")
	-- set all default
	local squad_data = {
		["location"] = squad_info.location or "$smart_1_1$",
		["name"] = squad_name, 
		["faction"] = faction or "mutant",
		['description_data'] = {
			["faction"] = faction or nil,	-- none for mutant
			["target"] = squad_type and igi_db.TEXT_HEADER .. squad_type or nil,	-- none for stalkers
			["location"] = squad_info.location or "$smart_1_1$",
		},
		['target'] = squad_info.target or "kill",
		['amount'] = squad_info.amount or 1,
	}
	--printf("SQUAD END")
	return squad_data
end

local function setup_smart(smart_data)
	-- printf("SMART START")
	-- There's no links in smarts, bcs I'm too lazy atm
	local amount = smart_data and smart_data.amount or 1;
	local possible_smarts = igi_helper.check_smarts(
		SIMBOARD.smarts_by_names, smart_data and smart_data.is_nearby, smart_data and smart_data.is_online)
	
	if #possible_smarts < amount then return nil end
	local smarts_list = igi_utils.get_random_items(possible_smarts, amount)
	local smarts_data = {
		['names'] = smarts_list,
	}
	--printf("SMART END")
	return smarts_data
end

local function setup_package(pkg_info, factions)
	--printf("PACKAGE START")
	local pkgs = {}
	local pkg_data = {}
	
	local pkg_type = pkg_info.package_type
	if not pkg_type then
		pkg_type = igi_helper.pick_quest_goods(pkg_info.quest_type)
	end
	
	if not pkg_type then
		printf("Igi: setup_package: No package type given")
		return nil
	end
	local section_name = "igi_package_"..pkg_type
	local amount = pkg_info.amount or ini_sys:r_float_ex(section_name, "amount_content")
	
	if not amount then
		printf("Igi: setup_package: Can't get amount")
		return nil
	end

	pkg_data.section_name = section_name
	pkg_data.amount = amount
	pkg_data.description_data = {["target"] = igi_db.TEXT_HEADER..pkg_type}
	pkg_data.target = pkg_info.target
	pkg_data.location = pkg_info.location or "$smart_1_1$"
	--printf("PACKAGE END")
	return pkg_data
end

local function setup_item(item_data, factions)
	--printf("ITEM START")
	assert(item_data.item_type, "Igi: setup_item: No item list given")

	local item_set = igi_db.TableView.new("item_types.ltx", 
			igi_helper.scale_value(item_data.item_type)):as_set()
	assert(item_set, "Igi: setup_item: No item_list")
	item_data.endings_list = igi_db.TableView.new("endings.ltx", item_data.possible_endings)

	local object_data = {}
	if item_data.to_create then
		printf("TODO")		-- TODO
	else
		item_data.enemy_to = factions[item_data.enemy_to] or item_data.enemy_to 
		objects = get_items_by_args(igi_helper.scale_value(item_data.item_type), item_data, 
				item_data.possible_endings, item_data.only_endings)
		if not next(objects) then return nil end

		objects = igi_utils.get_random_items(objects, item_data.amount or 1)
		
		object_data.target = item_data.target
		object_data.se_objects = objects

		local parent_id = objects[1].parent_id	-- TODO
		local parent_npc = igi_helper.check_common_npc(parent_id) and igi_helper.alife_obj(parent_id)

		local desc_target = igi_db.TEXT_HEADER..string.match(item_data.item_type, "^(%a+)")
		object_data.description_data = {
			['faction'] = parent_npc and igi_helper.get_community(parent_npc) or nil,
			['target'] = parent_npc and parent_npc:character_name() or desc_target,
			['location'] = igi_helper.get_object_location_description(objects[1])	-- TODO
		}
		--utils_data.print_table(object_data.description_data)
	end
	--printf("SETUP END")
	return object_data
end

function setup_quest(task_name)
	--[[		OUTDATED 
	-- This is generic function that sets everything you need for a quest
	-- Possible args:
	-- smarts (table) : {amount (int) - how many smarts to prepare,
	--					 is_nearby, is_online (bool) - smart attributes,
	--					 to_description (int) - n-th smart used for description}
	-- squads (table of tables) : {{amount (int),
	--								faction (string) OR		- can be any faction in game
	--								faction_type (string) - can be "enemy", "client" or "quest_giver",
	--								type (string) - can be "guard" or "heavy",
	--								target (string) - can be "kill", "save" or "contact"; default: kill,
	--								to_description (bool) - set squad faction as one of description factions, default: true
	--								}
	--								{*squads of another type with the same fields*}}
	-- packages (table of tables): {{amount (int), default: standart amount for this quest type
	--								 package_type (string) OR - must be in igi_db.PACKAGE,
	--								 quest_type (string) - see igi_db.QUEST_TO_POSSIBLE_GOODS,
	--								 smart_to_create (int) - if create: create in n-th smart, default: smarts[1]
	--								 target (string) - 'return', 'take' or 'open',
	--								 to_description (bool) - set package_type as one of description targets; default: true
	--},
	--								{*packages of another types with the same fields*}}
	-- items (table of tables): {{amount (int),
	--							  item_type (string) - only "artifact" and "weapon_*lowcost, midgame, endgame or legend*" rn OR
	--							  item_list (list) 	- search/create random item from list
	--							  to_create (bool) - TODO, if not create - then find
	--							  in_npc_inv (bool) - create(search) in npc inventories,
	--							  npc_identity (string) - 'friend', 'enemy', 'all' or faction
	--							  in_world (bool) - create(search) in world,
	--							  enemy_to (string) - if only_enemies then faction or "client" or "enemy" or "quest_giver"; default: player
	--							  npc_to_create (int) - TODO, if create: create in inventory of npc with this squad group,
	--							  smart_to_create (smart) - if create: create in n-th smart, default: 1},
	--							 {*items of another types with the same fields*}}
	--]]
	local constructor = init_constructor(task_name)
	CACHE = {["setup"] = {},}
	CACHE.task_name = task_name
	CACHE.factions = get_faction_setup()
	CACHE.description = {}
	
	local handlers = {
		["squad"] = setup_squad,
		["package"] = setup_package,
		["item"] = setup_item,
		["smart"] = setup_smart,
	}
	
	for _, entity_preset in pairs(constructor) do
		assert(handlers[entity_preset.entity_type], "Unknown entity_preset type: "..entity_preset.entity_type)
		local group_setup = handlers[entity_preset.entity_type](entity_preset, CACHE.factions)
		if not group_setup then return nil end
		
		group_setup.entity_type = entity_preset.entity_type
		group_setup.group_id = entity_preset.group_id
		group_setup.online_activities = entity_preset.online_activities

		if entity_preset.to_description ~= false and entity_preset.entity_type ~= "smart" then
			for k, v in pairs(group_setup.description_data) do
				if not CACHE.description[k] then CACHE.description[k] = {} end
				CACHE.description[k] = igi_utils.extend_list(CACHE.description[k], v)
			end
			group_setup.description_data = nil
		end
		local group_link = igi_linker.make_link(entity_preset.entity_type, entity_preset.group_id)
		CACHE.setup[group_link] = group_setup
	end

	return CACHE
end


