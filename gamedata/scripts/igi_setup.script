
local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end

function actor_on_first_update()
	igi_models.add_interface_implementation('Entity', Entity)
	igi_models.add_interface_implementation("Cache", Cache)

	igi_taskdata.add_classification_rule(function (CACHE)
		if not CACHE.setup then return end
		CACHE.setup.__cls = igi_target.EntitiesTable.__cls
		igi_models.restore_object_interface(CACHE.setup)
		for _, v in pairs(CACHE.setup) do
			v.__cls = 'Entity'
			igi_models.restore_object_interface(v)
		end
	end)
end

Cache = {
	get_setup = function (self)
		return self.setup
	end,

	set_setup = function (self, v)
		self.setup = v
	end
}

Entity = {
	add_preset_values = function (self, preset)
		for k, v in pairs(preset) do
			self[k] = self[k] or v
		end
	end,
}

------------------------------------------------
local function setup_group(entity)
	local target_tbl = igi_taskdata.get_target_table(entity.target or "basic")
	local setup_func = target_tbl["setup_"..entity.entity_type]
	local ok, desc = setup_func(entity)
	if not ok then return end

	entity:add_preset_values(entity)
	return true, desc
end

local function setup_entities(CACHE, description)
	trace_dbg("finalized CACHE", CACHE)

	local setup = {}
	for _, group_entity in pairs(CACHE:get_setup()) do
		trace_dbg('setup group '..tostring(_), group_entity)
		local ok, desc = setup_group(group_entity)
		trace_dbg('group_data, description', group_entity, desc)
		if not ok then return nil end

		description:add_entries(desc)
		setup[group_entity:get_link()] = group_entity
	end

	CACHE:set_setup(setup)
	return true
end

function setup_quest(task_id)
	trace_dbg("setup "..task_id)
	local game_time = game.get_game_time()
	local game_date = game_time:dateToString(game.CTime.DateToDay)
	igi_random.set_seed(task_id..game_date)

	local CACHE = igi_models.Cache.from(igi_taskdata.get_task_data(task_id))
	CACHE:set_task_id(task_id)

	CACHE.disabled = nil	-- not needed anymore
	CACHE.preconditions = nil	-- not needed

	local description = igi_description.TaskDescription.new()
	if not setup_entities(CACHE, description) then return end
	-- TODO: move
	CACHE.description = description:get_description(CACHE)
	trace_dbg("CACHE after setup "..task_id, CACHE)
	return CACHE
end


