local function add_predefined_values(group_data, entity_preset)
	for k,v in pairs(entity_preset) do
		group_data[k] = group_data[k] or entity_preset[k]
	end
end

local function get_faction_setup()	-- TODO: implement factions
	-- This function returns target character factions for all possible quests
	-- Quest by himself decides, which character(s) to use
	
	local faction_list = {
		["actor"] = 'stalker',		-- default values is 'stalker', will be changed if possible
		["task_giver"] = 'stalker',
		["client"] = 'stalker',
		["enemy"] = 'stalker',
	}
	
	local task_giver = mob_trade.GetTalkingNpc()
	faction_list.task_giver = character_community(task_giver)
	faction_list.actor = character_community(db.actor)
	
	local player_enemies = igi_helper.get_faction_enemies(faction_list.actor)
	local task_giver_enemies = igi_helper.get_faction_enemies(faction_list.task_giver)
	
	-- set enemy - must be enemy for both player and task giver
	tmp_enemies = {}	
	for faction in pairs(player_enemies) do					-- search for enemies of both player and task giver
		if task_giver_enemies[faction] then
			tmp_enemies[#tmp_enemies + 1] = faction
		end
	end
	if (#tmp_enemies == 0) then printf("GhenTuong: player and task giver doesn't share enemies") end
	faction_list["enemy"] = tmp_enemies[igi_random.rand(#tmp_enemies)] or "stalker"
	
	-- set client - must be enemy for enemy and not enemy with task giver; can be player's faction
	local enemy_enemies = igi_helper.get_faction_enemies(faction_list["enemy"])
	tmp_enemies = {}
	for faction in pairs(enemy_enemies) do
		if(faction ~= faction_list["task_giver"] and task_giver_enemies[faction] == nil) then
			tmp_enemies[#tmp_enemies + 1] = faction
		end
	end
	if (#tmp_enemies == 0) then printf("GhenTuong: can't setup client") end
	faction_list["client"] = tmp_enemies[igi_random.rand(#tmp_enemies)] or "stalker"
	return faction_list
end
------------------------------------------------
local function setup_group(entity, factions)
	local target_tbl = igi_taskdata.get_target_table(entity.target or "basic")
	local setup_func = target_tbl["setup_"..entity.entity_type]
	local group_data, desc = setup_func(entity, factions)
	if not group_data then return end

	add_predefined_values(group_data, entity)
	return group_data, desc
end

local function setup_CACHE(task_name)
	local CACHE = igi_models.create_CACHE()
	CACHE.task_name = task_name
	CACHE.factions = get_faction_setup()
	return CACHE
end

local function setup_entities(CACHE, description)
	local task_data = igi_taskdata.construct_task(CACHE.task_name)
	
	for _, group_preset in pairs(task_data) do
		local group_data, desc = setup_group(group_preset, CACHE.factions)
		printf("group_data exists2: "..tostring(not not group_data))
		if not group_data then return nil end

		description:add_entries(desc)
		CACHE.setup[igi_linker.make_entity_link(group_preset)] = group_data
	end
	return true
end

function setup_quest(task_name)
	local game_time = game.get_game_time()
	local game_date = game_time:dateToString(game.CTime.DateToDay)
	igi_random.set_seed(task_name..game_date)

	local CACHE = setup_CACHE(task_name)
	local description = igi_description.TaskDescription.new()
	if not setup_entities(CACHE, description) then return end
	CACHE.description = description:get_description(CACHE)
	return CACHE
end


