
local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end

function actor_on_first_update()
	igi_models.add_interface_implementation("Cache", Cache)
	igi_models.add_interface_implementation("EntitiesTable", EntitiesTable)
	igi_models.add_interface_implementation('Entity', Entity)

	igi_taskdata.add_classification_rule(function (CACHE)
		local entities = CACHE:get_entities()
		if not entities then return end
		igi_models.set_class(entities, igi_target.EntitiesTable.__cls)
		for _, v in pairs(entities) do
			igi_models.set_class(v, 'Entity')
		end
	end)
end

Cache = {
	initialise_entities = function (self)
		return self:get_entities():initialise_all()
	end,

	initialise_quest = function (self, task_id)
		trace_dbg("setup "..task_id)
		igi_random.set_seed(task_id)

		local CACHE = igi_models.Cache.from(self) -- clone and finalize
		CACHE:set_task_id(task_id)
		trace_dbg("finalized CACHE", CACHE)

		CACHE.disabled = nil	-- not needed anymore
		CACHE.preconditions = nil	-- not needed

		if not CACHE:initialise_entities() then return end
		trace_dbg("CACHE after setup "..task_id, CACHE)
		return CACHE
	end
}

EntitiesTable = {
	initialise_all = function (self)
		for _, entity in pairs(self) do
			trace_dbg('setup group '..tostring(_), entity)
			local ok, new_entities = entity:initialise()
			if not ok then return end
			trace_dbg('group_data, new entities', entity, new_entities)

			for _, entity in pairs(new_entities or {}) do
				self:add(entity)
			end
		end
		self:relink()
		return true
	end,
}

Entity = {
	add_preset_values = function (self, preset)
		for k, v in pairs(preset) do
			self[k] = self[k] or v
		end
	end,

	initialise = function (self)
		self:set_initialised()
		local target_tbl = self:get_target_table()
		return target_tbl["setup_"..self.entity_type](self)
	end,

	is_initialised = function (self)
		return self._state == "initialised"
	end,

	set_initialised = function (self)
		self._state = "initialised"
	end
}
