function get_player_tier()
	local player_rank = db.actor:character_rank()
	local tiers = igi_db.SectionView.new("tiers.ltx", "player_tiers")
	for tier, bounds in pairs(tiers:as_table()) do
		if player_rank >= bounds[1] and player_rank <= bounds[2] then
			return tier
		end
	end
	return "endgame"
end

function scale_value(str)
	local player_tier = igi_helper.get_player_tier()
	return string.gsub(str, "scalable", player_tier)
end

------------------------------------------------
--[[function create_TaskData(task_name)
	local tbl = {}
	tbl._cls = 'TaskData'
	tbl.task_name = task_name
	tbl.player_tier = get_player_tier()
	tbl.setup = {}
	tbl.entities = {}
	return tbl
end

TaskInterface = {}
TaskInterface.mt = {}

function TaskInterface.new(task_data)
	assert(task_data._cls = 'TaskData', 'TaskInterface: not TaskData given')
	local tbl = {task_data = task_data}
	tbl:setmetatable(TaskInterface.mt)
end

]]

local function get_faction_enemies(faction, --[[optional]] monolith_included)
	monolith_included = monolith_included or false
	local enemies_set = {}
	factions = igi_db.SectionView.new('squad_base.ltx', 'guard')
	
	for enemy_faction in pairs(factions:as_table()) do
		if (game_relations.is_factions_enemies(faction, enemy_faction)) then
			if (enemy_faction ~= "monolith" or monolith_included) then
				enemies_set[enemy_faction] = true
			end
		end
	end
	return enemies_set
end

local function get_faction_setup()	-- TODO: implement factions
	-- This function returns target character factions for all possible quests
	-- Quest by himself decides, which character(s) to use
	
	local faction_list = {
		["actor"] = 'stalker',		-- default values is 'stalker', will be changed if possible
		["task_giver"] = 'stalker',
		["client"] = 'stalker',
		["enemy"] = 'stalker',
	}
	
	local task_giver = mob_trade.GetTalkingNpc()
	faction_list.task_giver = character_community(task_giver)
	faction_list.actor = character_community(db.actor)
	
	local player_enemies = get_faction_enemies(faction_list.actor)
	local task_giver_enemies = get_faction_enemies(faction_list.task_giver)
	
	-- set enemy - must be enemy for both player and task giver
	tmp_enemies = {}	
	for faction in pairs(player_enemies) do					-- search for enemies of both player and task giver
		if task_giver_enemies[faction] then
			tmp_enemies[#tmp_enemies + 1] = faction
		end
	end
	if (#tmp_enemies == 0) then printf("GhenTuong: player and task giver doesn't share enemies") end
	faction_list["enemy"] = tmp_enemies[math.random(#tmp_enemies)] or "stalker"
	
	-- set client - must be enemy for enemy and not enemy with task giver; can be player's faction
	local enemy_enemies = get_faction_enemies(faction_list["enemy"])
	tmp_enemies = {}
	for faction in pairs(enemy_enemies) do
		if(faction ~= faction_list["task_giver"] and task_giver_enemies[faction] == nil) then
			tmp_enemies[#tmp_enemies + 1] = faction
		end
	end
	if (#tmp_enemies == 0) then printf("GhenTuong: can't setup client") end
	faction_list["client"] = tmp_enemies[math.random(#tmp_enemies)] or "stalker"
	return faction_list
end

------------------------------------------------
local function init_constructor(task_name)
	local constructor = {}
	local tbl = igi_db.get_task_data(task_name)
	copy_table(constructor, tbl)
	constructor = igi_helper.scale_to_rank(constructor)
	constructor = igi_linker.assign_group_id(constructor)
	return constructor
end

local function setup_squad(squad_info, factions)
	--printf("SQUAD START")

	local squad_name
	local squad_type
	local faction
	local squad_data

	if squad_info.to_create then
		local squads = assert(igi_db.SectionView.new("squad_base.ltx", squad_info.type),
			"Igi: setup squad: Unknown squad type")
		if string.find(squad_info.type, "mutant") then
			squad_name, squad_type = squads:random()
		else
			assert(squad_info.faction or squad_info.faction_type, "Igi: setup_squad: No faction data")
			faction = squad_info[squad_info.faction] or factions[squad_info.faction_type]
			squad_name = squads[faction]
		end

		assert(squad_name, "Igi: setup_squad: Unable to set squad_name")
		-- set all default
		squad_data = {
			["location"] = squad_info.location or "$smart_1_1$",
			["name"] = squad_name, 
			["faction"] = faction or "mutant",
			['description_data'] = {
				["faction"] = faction or nil,	-- none for mutant
				["target"] = squad_type and igi_db.TEXT_HEADER .. squad_type or nil,	-- none for stalkers
				["location"] = squad_info.location or "$smart_1_1$",
			},
			['target'] = squad_info.target or "kill",
			['amount'] = squad_info.amount or 1,
		}
	else
		local finder = igi_finder.get_finder()
		local factions
		if squad_info.type == "mutant" then
			factions = igi_db.SectionView.new(
					"finder\\squad_types.ltx", "monster_types"
					):as_set()
		else
			factions = get_faction_enemies(factions.actor)
		end
		utils_data.print_table(squad_info, "squad_info")
		local squads = finder:get_squads_by_args(squad_info, factions)
		utils_data.print_table(squads, "squads")
		local targets = igi_utils.get_random_items(squads, squad_info.amount or 1)
		squad_data = {
			name = "predefined_squad",
			ids = targets,
			faction = faction or "mutant",
			description_data = {
				-- TODO
				faction = faction or nil,	-- none for mutant
				target = squad_type and igi_db.TEXT_HEADER .. squad_type or nil,	-- none for stalkers
				-- location = squad_info.location or "$smart_1_1$",
			},
			target = squad_info.target or "kill",
		}
	end
	--printf("SQUAD END")
	return squad_data
end

local function setup_smart(smart_data)
	-- printf("SMART START")
	-- There's no links in smarts, bcs I'm too lazy atm
	local amount = smart_data and smart_data.amount or 1;
	local possible_smarts = igi_helper.check_smarts(
		SIMBOARD.smarts_by_names, smart_data and smart_data.is_nearby, smart_data and smart_data.is_online)
	
	if #possible_smarts < amount then return nil end
	local smarts_list = igi_utils.get_random_items(possible_smarts, amount)
	local smarts_data = {
		['names'] = smarts_list,
	}
	--printf("SMART END")
	return smarts_data
end

local function setup_package(pkg_info, factions)
	--printf("PACKAGE START")
	local pkgs = {}
	local pkg_data = {}
	
	local pkg_type = pkg_info.package_type
	if not pkg_type then
		pkg_type = igi_helper.pick_quest_goods(pkg_info.quest_type)
	end
	
	if not pkg_type then
		printf("Igi: setup_package: No package type given")
		return nil
	end
	local section_name = "igi_package_"..pkg_type
	local amount = pkg_info.amount or ini_sys:r_float_ex(section_name, "amount_content")
	
	if not amount then
		printf("Igi: setup_package: Can't get amount")
		return nil
	end

	pkg_data.section_name = section_name
	pkg_data.amount = amount
	pkg_data.description_data = {["target"] = igi_db.TEXT_HEADER..pkg_type}
	pkg_data.target = pkg_info.target
	pkg_data.location = pkg_info.location or "$smart_1_1$"
	--printf("PACKAGE END")
	return pkg_data
end

local function setup_item(item_data, factions)
	--printf("ITEM START")
	assert(item_data.item_type, "Igi: setup_item: No item list given")

	local item_set = igi_db.SectionView.new("item_types.ltx", 
			igi_helper.scale_value(item_data.item_type)):as_set()
	assert(item_set, "Igi: setup_item: No item_list")

	local object_data = {}
	if item_data.to_create then
		printf("TODO")		-- TODO
	else
		local finder = igi_finder.get_finder()
		item_data.enemy_to = factions[item_data.enemy_to] or item_data.enemy_to 
		objects = finder:get_items_by_args(igi_helper.scale_value(item_data.item_type), item_data, 
				item_data.possible_endings, item_data.only_endings)
		if not next(objects) then 
			printf("Igi: no objects")
			return nil 
		end

		objects = igi_utils.get_random_items(objects, item_data.amount or 1)
		
		object_data.target = item_data.target
		object_data.ids = {}
		for _, se_obj in pairs(objects) do
			table.insert(object_data.ids, se_obj.id)
		end

		local parent_id = objects[1].parent_id	-- TODO
		local parent_npc = igi_helper.check_common_npc(parent_id) and igi_helper.alife_obj(parent_id)

		local desc_target = igi_db.TEXT_HEADER..string.match(item_data.item_type, "^(%a+)")
		object_data.description_data = {
			['faction'] = parent_npc and igi_helper.get_community(parent_npc) or nil,
			['target'] = parent_npc and parent_npc:character_name() or desc_target,
			['location'] = igi_helper.get_object_location_description(objects[1])	-- TODO
		}
		--utils_data.print_table(object_data.description_data)
	end
	--printf("SETUP END")
	return object_data
end

function setup_quest(task_name)
	local constructor = init_constructor(task_name)
	CACHE = {["setup"] = {},}
	CACHE.task_name = task_name
	CACHE.factions = get_faction_setup()
	CACHE.description = {}
	
	local handlers = {
		["squad"] = setup_squad,
		["package"] = setup_package,
		["item"] = setup_item,
		["smart"] = setup_smart,
	}
	
	for _, entity_preset in pairs(constructor) do
		assert(handlers[entity_preset.entity_type], "Unknown entity_preset type: "..entity_preset.entity_type)
		local group_setup = handlers[entity_preset.entity_type](entity_preset, CACHE.factions)
		if not group_setup then return nil end
		
		group_setup.entity_type = entity_preset.entity_type
		group_setup.group_id = entity_preset.group_id
		group_setup.online_activities = entity_preset.online_activities

		if entity_preset.to_description ~= false and entity_preset.entity_type ~= "smart" then
			for k, v in pairs(group_setup.description_data) do
				if not CACHE.description[k] then CACHE.description[k] = {} end
				CACHE.description[k] = igi_utils.extend_list(CACHE.description[k], v)
			end
			group_setup.description_data = nil
		end
		local group_link = igi_linker.make_link(entity_preset.entity_type, entity_preset.group_id)
		CACHE.setup[group_link] = group_setup
	end

	return CACHE
end


