local trace_assert = igi_helper.trace_assert

are_preconditions_fulfilled = function (CACHE)
	if not CACHE.preconditions then return true end
	return CACHE.preconditions:check()
end

PreconditionTable = {
	__cls = "PreconditionTable",
	__precondition_types = {},

	check = function (self)
		for _, precondition in pairs(self) do
			if not precondition:check() then
				return false
			end
		end
		return true
	end,

	add_type = function (self, precondition_class)
		self.__precondition_types[precondition_class.type] = precondition_class
	end,
}

GoodwillPrecondition = {
	__cls = "GoodwillPrecondition",
	type = "goodwill",

	check = function (self)
		local task_giver = mob_trade.GetTalkingNpc()
		local community = igi_helper.get_community_by_id(task_giver:id())
		return db.actor:community_goodwill(community) >= self.value
	end
}
PreconditionTable:add_type(GoodwillPrecondition)

RankPrecondition = {
	__cls = "RankPrecondition",
	type = "rank",

	check = function (self)
		local tier = self.tier
		local quest_tiers = igi_db.SectionView("tiers.ltx", "player_tiers")
		trace_assert(quest_tiers[tier] or ranks.stalker_rank_intervals[tier],
				"Invalid quest tier")

		if quest_tiers[tier] then
			lower_bound = quest_tiers[tier][1]
			higher_bound = quest_tiers[tier][2]
		elseif ranks.stalker_rank_intervals[tier] then
			lower_bound = ranks.stalker_rank_intervals[tier][1]
			higher_bound = ranks.stalker_rank_intervals[tier][2]
		end
		local player_rank = db.actor:character_rank()
		return player_rank >= lower_bound and player_rank <= higher_bound
	end,
}
PreconditionTable:add_type(RankPrecondition)

DaytimePrecondition = {
	__cls = "DaytimePrecondition",
	type = "daytime",

	check = function (self)
		local lower_bound, higher_bound = self.h[0], self.h[1]
		local h_dt = (24+higher_bound-lower_bound)%24

		local game_t = game.get_game_time()
		local y, m, d = game_t:get()

		local t = game.CTime()
		t:set(y, m, d, lower_bound, 0, 0, 0)
		if not (game_t > t) then
			return false
		end

		local dt = game.CTime()
		dt:setHMS(h_dt, 0, 0)
		return game_t < (t + dt)
	end
}
PreconditionTable:add_type(DaytimePrecondition)
