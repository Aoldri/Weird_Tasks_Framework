local trace_assert = igi_helper.trace_assert

conditions = {}

function check_conditions(conds)
	if not conds then return true end
	for _, precondition in pairs(conds) do
		local check_f = conditions[precondition.type]
		if not check_f(precondition) then
			return false
		end
	end
	return true
end

conditions.goodwill = function (cond)
	local task_giver = mob_trade.GetTalkingNpc()
	local community = igi_helper.get_community_by_id(task_giver:id())
	return db.actor:community_goodwill(community) >= cond.value
end

conditions.rank = function (cond)
	local tier = cond.tier
	local quest_tiers = igi_db.SectionView("tiers.ltx", "player_tiers")
	trace_assert(quest_tiers[tier] or ranks.stalker_rank_intervals[tier],
			"Invalid quest tier")

	if quest_tiers[tier] then
		lower_bound = quest_tiers[tier][1]
		higher_bound = quest_tiers[tier][2]
	elseif ranks.stalker_rank_intervals[tier] then
		lower_bound = ranks.stalker_rank_intervals[tier][1]
		higher_bound = ranks.stalker_rank_intervals[tier][2]
	end
	local player_rank = db.actor:character_rank()
	return player_rank >= lower_bound and player_rank <= higher_bound
end

conditions.daytime = function (cond)
	local lower_bound, higher_bound = cond.h[0], cond.h[1]
	local h_dt = (24+higher_bound-lower_bound)%24

	local game_t = game.get_game_time()
	local y, m, d = game_t:get()

	local t = game.CTime()
	t:set(y, m, d, lower_bound, 0, 0, 0)
	if not (game_t > t) then
		return false
	end

	local dt = game.CTime()
	dt:setHMS(h_dt, 0, 0)
	return game_t < (t + dt)
end
