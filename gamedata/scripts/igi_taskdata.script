-------------------------------------------------
-- task table reworking functions
-------------------------------------------------
local function wrap_array_keys(task_table)
	local array_keys = {"where", "look_in"}

	for _, entity in pairs(task_table) do
		for _, k in pairs(array_keys) do

			local val = entity[k]
			if type(val) == "string" and not igi_linker.is_dependency(val) then
				entity[k] = {entity[k]}
			end
		end
	end
end

local function add_defaults(task_tbl, task_name)
	for _, entity in pairs(task_tbl) do
		local defaults = igi_db.SectionView.new("defaults.ltx", "defaults_"..entity.entity_type)
		for k, v in pairs(defaults:as_table()) do
			if v == "*task_name*" then v = task_name end	-- MAYBE NOT HERE
			if not entity[k] then entity[k] = v end
		end
	end
end

local function create_smart_and_redirect(entity, count, smarts_table)
	local smart = igi_models.create_smart_setup(entity.where or {"everywhere"})
	table.insert(smarts_table, smart)
	
	count["smart"] = count["smart"] + 1
	entity.where = "$smart_"..tostring(count["smart"]).."_1$"
end

local function setup_task_locations(task_table)
	local links, count_entities = igi_linker.get_entity_links(task_table)
	count_entities.smart = count_entities.smart or 0
	local new_smarts = {}
	
	for _, entity in pairs(task_table) do
		if entity.to_create and type(entity.where) ~= "string" then
			create_smart_and_redirect(entity, count_entities, new_smarts)
		end
	end
	
	igi_utils.extend_list(task_table, new_smarts)
end
-------------------------------------------------
-- JSON functions
-------------------------------------------------
local function get_configs_path()
  local info = debug.getinfo(1,'S');
  local script_path = info.source:match[[^@?(.*[\/])[^\/]-$]]
  gamedata_path = script_path:match([[(.*gamedata)]])
  config_path = gamedata_path.."\\configs\\igi_tasks\\"
  return config_path
end

local configs_path = get_configs_path()
local function read_task_json(task_name)
	local path = configs_path.."tasks\\"..task_name..".json"
    local file = io.open(path, "rb") -- r read mode and b binary mode
    if not file then return nil end
    local content = file:read "*a" -- *a or *all reads the whole file
    file:close()
    return content
end

local json = igi_json.get_json()
local function get_task_table(task_name)
	return json.decode(read_task_json(task_name))
end

-------------------------------------------------
-- global functions
-------------------------------------------------
function get_task_data(task_name)
	local task_tbl = get_task_table(task_name)
	assert(task_tbl, "Igi: no such task: "..tostring(task_name or "nil"))

	add_defaults(task_tbl, task_name)
	wrap_array_keys(task_tbl)
	setup_task_locations(task_tbl)
	return task_tbl
end
get_task_data = igi_utils.memoize_one_variable(get_task_data)

function construct_task(task_name)
	local task_data = {}

	local tbl = igi_db.get_task_data(task_name)
	copy_table(task_data, tbl)

	task_data = igi_helper.scale_to_rank(task_data)
	task_data = igi_linker.assign_group_id(task_data)
	return task_data
end




























