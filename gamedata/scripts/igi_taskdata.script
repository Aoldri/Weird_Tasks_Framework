-------------------------------------------------
-- task table reworking functions
-------------------------------------------------
local function wrap_array_keys(task_table)
	local array_keys = {"where", "look_in"}

	for _, entity in pairs(task_table) do
		for _, k in pairs(array_keys) do

			local val = entity[k]
			if type(val) == "string" and not igi_linker.is_dependency(val) then
				entity[k] = {entity[k]}
			end
		end
	end
end

local function create_smart_and_redirect(entity, counter, smarts_table)
	local smart = igi_models.create_smart_setup(entity.where or {"everywhere"})
	table.insert(smarts_table, smart)
	
	counter["smart"] = counter["smart"] + 1
	entity.where = "$smart_"..tostring(counter["smart"]).."_1$"
end

local function count_entities(task_setup)
	local counter = {
		smart = 0,
		squad = 0,
		item = 0,
	}
	for _, v in pairs(task_setup) do
		counter[v.entity_type] = counter[v.entity_type] + 1
	end
	return counter
end

local function setup_task_locations(task_table, counter)
	local new_smarts = {}
	
	for _, entity in pairs(task_table) do
		if entity.to_create and type(entity.where) ~= "string" then
			create_smart_and_redirect(entity, counter, new_smarts)
		end
	end
	
	igi_utils.extend_list(task_table, new_smarts)
end

-------------------------------------------------
-- JSON functions
-------------------------------------------------
local function get_configs_path()
  local info = debug.getinfo(1,'S');
  local script_path = info.source:match[[^@?(.*[\/])[^\/]-$]]
  gamedata_path = script_path:match([[(.*gamedata)]])
  config_path = gamedata_path.."\\configs\\igi_tasks\\"
  return config_path
end

local configs_path = get_configs_path()
local function read_task_json(task_name)
	local path = configs_path.."tasks\\"..task_name..".json"
    local file = io.open(path, "rb") -- r read mode and b binary mode
    if not file then return nil end
    local content = file:read "*a" -- *a or *all reads the whole file
    file:close()
    return content
end

local json = igi_json.get_json()
local function get_task_table(task_name)
	return json.decode(read_task_json(task_name))
end

-------------------------------------------------
-- global functions
-------------------------------------------------
function get_task_data(task_name)
	local task_tbl = get_task_table(task_name)
	assert(task_tbl, "Igi: no such task: "..tostring(task_name or "nil"))

	wrap_array_keys(task_tbl.setup)
	task_tbl.group_counter = count_entities(task_tbl.setup)
	setup_task_locations(task_tbl.setup, task_tbl.group_counter)
	igi_callbacks.invoke_target_callbacks("on_get_taskdata", task_tbl.setup, task_tbl.setup)
	return task_tbl
end
get_task_data = igi_utils.memoize_one_variable(get_task_data)

function get_task_setup(task_name)
	return get_task_data(task_name).setup
end

function get_finalized_task_setup(task_name)
	local tbl = get_task_data(task_name)
	local task_setup = dup_table(tbl.setup)

	task_setup = igi_linker.assign_group_id(task_setup)
	task_setup = igi_text_processor.resolve_unlinked_macros(task_setup)
	igi_text_processor.link_virtual_variables(task_setup)
	return task_setup
end

function get_target_table(target)
	if not target then return end
	local target_tbl = _G["igi_target_"..target]
	
	if not target_tbl then
		callstack()
		assert(nil, "Igi Tasks: no target tbl for target "..tostring(target or "nil"))
	end
	
	if target_tbl.PATTERN then
		setmetatable(target_tbl, {__index = get_target_table(target_tbl.PATTERN)})
	end
	return target_tbl
end
get_target_table = igi_utils.memoize_one_variable(get_target_table)



























