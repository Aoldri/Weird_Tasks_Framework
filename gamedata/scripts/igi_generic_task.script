-- =============================================================
--	Quest functions (igi_generic_task.script)
--	Anomaly 1.5.5.0
--	Igigog
-- =============================================================
local TASKS_CACHE = {}

function on_game_start()
    RegisterScriptCallback("save_state",save_state)
    RegisterScriptCallback("load_state",load_state)
	printdbg("Igi_Tasks BETA initialised")
end

function save_state(m_data)
	m_data.igi_tasks_cache = TASKS_CACHE
end

function load_state(m_data)
	TASKS_CACHE = m_data.igi_tasks_cache or {}
end

---------------------------< Precondition >---------------------------
xr_conditions.validate_generic_task = function(actor, npc, p)
	assert(p and p[1], "No task id given")
	local task_id = p[1]
	local task_name = igi_helper.get_task_name(task_id)
	assert(task_name and task_id and igi_db.get_task_data(task_name), "Igi: validate_task: task_name invalid")

	local task_giver = mob_trade.GetTalkingNpc()
	local squad = get_object_squad(task_giver) --Task count for squad. Not NPC.
	if not task_giver or not squad then return false end
	--local giver_task_count = utils.load_var(db.actor, "drx_sl_task_giver_" .. squad.id, 0)
	--if giver_task_count >= MAX_TASK then return false end
	
	if igi_db.get_value("task_info.ltx", task_name.."_preconditions", "disabled") then
		return false
	end
	--local preconditions = igi_db.SectionView.new("task_info.ltx", task_name.."_preconditions")
	local preconditions = igi_db.SectionView.new("task_info_debug.ltx", task_name.."_preconditions")
	if not igi_precondition.check(preconditions) then
		return false
	end
	TASKS_CACHE[task_id] = TASKS_CACHE[task_id] or igi_setup.setup_quest(task_name)
	return TASKS_CACHE[task_id] and true or false
end

--< Effect >--------------------------------------------------
xr_effects.igi_task_generic_setup = function(actor,npc,p)
	--This function will be called on_job_descr
	if not p and p[1] then return false end
	local task_id = p[1]
	--Setup
	local CACHE = assert(TASKS_CACHE[task_id], "Igi: task "..task_id.." : CACHE not initialised")
	--Give message
	local description = igi_description.get_postpone_intel(task_id, CACHE.description)
	--Print the message
	CreateTimeEvent(0, "gt_task_"..CACHE.task_name.."_setup", 0, igi_description.postpone_function, description)
end
--< Status >--------------------------------------------------
task_status_functor.igi_task_generic_status = function (tsk,task_id)
	if not (db.actor and tsk) then return end
	local CACHE = assert(TASKS_CACHE[task_id], "CACHE not initialised for task "..task_id)
	---------------------------<INIT>-------------------------
	-- First run, create target
	if not (CACHE["target"]) then
		--utils_data.print_table(CACHE, "CACHE before")
		CACHE.target = igi_target.create_target(CACHE.setup, CACHE.task_name)
		CACHE.setup = nil	-- you don't need setup after object creation
		CACHE.subtasks = igi_subtask.setup_subtask(CACHE.target)
		CACHE.online_activities = igi_activities.sort_online_activities(CACHE.target)
		--utils_data.print_table(CACHE, "CACHE after")
	end
	
	-- Timer for less pressure (totally stolen from tasks_assault.script)
	local tg = time_global()
	if (tsk.__actions_time and tg < tsk.__actions_time) then
		return
	end
	tsk.__actions_time = tg+3000
	---------------------------<ACTIONS>---------------------
	igi_subtask.update_marks(CACHE.target)
	igi_activities.do_online_activities(CACHE)
	if igi_subtask.process_instant_subtasks(CACHE.subtasks) == "fail" then
		return "fail"
	end

	if igi_subtask.check_continuous_failed(CACHE.subtasks.continuous) then return "fail" end
	-- If no continuous and no money reward -> complete task, when all instant are ready
	if not next(CACHE.subtasks.instant) and not next(CACHE.subtasks.continuous) and
			igi_db.get_value("task_info.ltx", CACHE.task_name, "reward_money") == 0 then
		return "complete" 
	end
	---------------------------<STAGE>----------------------
	-- If no more instant objectives: stage = 1; if all continuous are ready: stage = 2
	
	-- skip stage 1 if task has no continuous
	local instant_done = not next(CACHE.subtasks.instant)
	local continuous_done = not igi_subtask.check_continuous_running(CACHE.subtasks.continuous)
	if instant_done and continuous_done then
		tsk.stage = 2
	end
	
	if tsk.stage == 0 and instant_done then
		tsk.stage = 1
	end
	if tsk.stage == 1 and not continuous_done then
		tsk.stage = 2
	end
	if tsk.stage == 2 then
		-- target function works independently so this works
		if tsk.current_target ~= tsk.task_giver_id then tsk.stage = 1 end
	end
	
end
--< Target >--------------------------------------------------
task_functor.igi_task_generic_target = function(task_id,field,p,tsk)
	--This function point to a task target in PDA
	local CACHE = TASKS_CACHE[task_id]
	if not CACHE then return end

	local target_id = igi_subtask.quest_target(CACHE.subtasks)
	return target_id or (tsk.stage ~= 0 and tsk.task_giver_id) 	-- target_id or task_giver_id
end
--< Text >--------------------------------------------------
task_functor.igi_task_generic_text = function(task_id,field,p,tsk)
	--This function return a text for title_functor and descr_functor
	local CACHE = TASKS_CACHE[task_id]

	if field == "descr" and tsk.stage == 2 then
		field = "done"
	end

	local text = igi_description.get_task_text(task_id, field)
	local desc = field ~= "title" and ("\\n "..CACHE.description) or ""

	return text..desc
end
--< Reward >--------------------------------------------------
xr_effects.igi_task_generic_finish = function(actor,npc,p)
	if not (p and p[1] and p[2]) then return end
	local task_id = p[1]
	local is_completed = p[2] == "true"

	local CACHE = TASKS_CACHE[task_id]
	--Reward money
	if is_completed then
		igi_helper.reward_quest_money(CACHE.task_name)
		xr_effects.inc_task_stage(a, b, {task_id})
	end
	-- Goodwill
	igi_helper.change_goodwill(CACHE.factions.task_giver, CACHE.task_name, is_completed)
	--Release
	igi_subtask.finish_continuous_subtasks(CACHE.subtasks.continuous, is_completed)
	igi_helper.release_targets_in_world(CACHE.target)	-- to rework: SV: can't find child...
	igi_subtask.unmark_all(CACHE.target)
	--Reset stored data
	TASKS_CACHE[task_id] = nil
	--Finish
	xr_effects.drx_sl_unregister_task_giver(a, b, {task_id})
	xr_effects.drx_sl_reset_stored_task(a, b, {task_id})
end