-- =============================================================
--	Quest functions (igi_generic_task.script)
--	Anomaly 1.5.5.0
--	Igigog
-- =============================================================
local TASKS_VERSION = "2.8"
local TASK_SETUP = {}
local TASKS_CACHE = {TASKS_VERSION = TASKS_VERSION}

function on_game_start()
    RegisterScriptCallback("save_state",save_state)
    RegisterScriptCallback("load_state",load_state)
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
	printf("Igi_Tasks CTE "..TASKS_VERSION.." initialised")
end

function actor_on_first_update()
	if TASKS_CACHE.TASKS_VERSION ~= TASKS_VERSION then
		printf("Igi Tasks: Updating "..(TASKS_CACHE.TASKS_VERSION or "nil")
				.." -> "..TASKS_VERSION)
		TASKS_CACHE.TASKS_VERSION = nil

		local task_manager = task_manager.get_task_manager()
		for k, _ in pairs(TASKS_CACHE) do
			TASKS_CACHE[k] = nil
			task_manager.task_info[k] = nil
		end

		TASKS_CACHE.TASKS_VERSION = TASKS_VERSION
		printf("Igi Tasks: Update successful.")
		news_manager.send_tip(db.actor, "Igi Tasks: Update complete. Welcome to Igi Tasks "..TASKS_VERSION, nil, nil, 30000)
	end
end

function save_state(m_data)
	m_data.igi_tasks_cache = TASKS_CACHE
end

function load_state(m_data)
	TASKS_CACHE = m_data.igi_tasks_cache or {TASKS_VERSION = TASKS_VERSION}
end

local function get_cache(task_id)
	if not TASKS_CACHE[task_id] then
		TASKS_CACHE[task_id] = TASK_SETUP[task_id]
	end
	return assert(TASKS_CACHE[task_id], "Igi: task "..task_id.." : CACHE not initialised")
end

local function get_setup_cache(task_id)
	return assert(TASK_SETUP[task_id], "Igi: task "..task_id.." : CACHE not initialised")
end
---------------------------< Precondition >---------------------------
xr_conditions.validate_generic_task = function(actor, npc, p)
	assert(p and p[1], "No task id given")
	local task_id = p[1]
	local task_name = igi_helper.get_task_name(task_id)
	printf("setup "..task_name)
	assert(task_name and task_id and igi_taskdata.get_task_data(task_name), 
		"Igi: validate_task: task_name invalid")
		
	-- TASK LIMIT CHECK
	if dialogs.has_tasks_by_npc(db.actor, npc) then return false end
	
	local task_data = igi_taskdata.get_task_data(task_name)
	-- printf(utils_data.print_table(task_data, "task_data", true))
	if task_data.disabled then return false end
	if not igi_precondition.check(task_data.preconditions) then return false end
	if not TASK_SETUP[task_id] then
		TASK_SETUP[task_id] = igi_setup.setup_quest(task_name)
		TASK_SETUP.task_id = task_id
	end
	return TASK_SETUP[task_id] and true or false
end

--< Effect >--------------------------------------------------
xr_effects.igi_task_generic_setup = function(actor,npc,p)
	--This function will be called on_job_descr
	if not p and p[1] then return false end
	local task_id = p[1]
	--Setup
	local CACHE = get_setup_cache(task_id)
	--Give message
	local description = igi_description.get_postpone_intel(task_id, CACHE.description)
	--Print the message
	CreateTimeEvent(0, "igi_task_"..CACHE.task_name.."_setup", 0, igi_description.postpone_function, description)
end
--< Status >--------------------------------------------------
task_status_functor.igi_task_generic_status = function (tsk,task_id)
	if not (db.actor and tsk) then return end
	local CACHE = get_cache(task_id)
	---------------------------<INIT>-------------------------
	-- First run, create target
	if not (CACHE["target"]) then
		--utils_data.print_table(CACHE, "CACHE before")
		CACHE.target = igi_target.create_target(CACHE.setup, CACHE.task_name)
		igi_callbacks.invoke_target_callbacks("on_after_target_creation", CACHE)
		CACHE.setup = nil	-- you don't need setup after object creation
		CACHE.subtasks = igi_subtask.setup_subtask(CACHE.target)
		CACHE.online_activities = igi_activities.sort_online_activities(CACHE.target)
		-- printf(utils_data.print_table(CACHE, "CACHE after", true))
	end
	
	-- Timer for less pressure (totally stolen from tasks_assault.script)
	local tg = time_global()
	if (tsk.__actions_time and tg < tsk.__actions_time) then
		return
	end
	tsk.__actions_time = tg+3000
	---------------------------<ACTIONS>---------------------
	igi_subtask.update_marks(CACHE.target)
	igi_activities.do_online_activities(CACHE)
	if igi_subtask.process_instant_subtasks(CACHE.subtasks) == "fail" then
		return "fail"
	end

	if igi_subtask.check_continuous_failed(CACHE.subtasks.continuous) then return "fail" end
	-- If no continuous and no money reward -> complete task, when all instant are ready
	local task_data = igi_taskdata.get_task_data(igi_helper.get_task_name(task_id))
	if not next(CACHE.subtasks.instant) and not next(CACHE.subtasks.continuous) and
			task_data.reward and task_data.reward.money == 0 then
		return "complete" 
	end
	---------------------------<STAGE>----------------------
	-- If no more instant objectives: stage = 1; if all continuous are ready: stage = 2
	
	-- skip stage 1 if task has no continuous
	local instant_done = not next(CACHE.subtasks.instant)
	local continuous_done = not igi_subtask.check_continuous_running(CACHE.subtasks.continuous)
	if instant_done and continuous_done then
		tsk.stage = 2
	end
	
	if tsk.stage == 0 and instant_done then
		tsk.stage = 1
	end
	if tsk.stage == 1 and not continuous_done then
		tsk.stage = 2
	end
	if tsk.stage == 2 then
		-- target function works independently so this works
		if tsk.current_target ~= tsk.task_giver_id then tsk.stage = 1 end
	end
	
end
--< Target >--------------------------------------------------
task_functor.igi_task_generic_target = function(task_id,field,p,tsk)
	--This function point to a task target in PDA
	local CACHE = get_cache(task_id)
	if not CACHE then return end

	local target_id = igi_subtask.quest_target(CACHE.subtasks, CACHE)
	if target_id and target_id > 0 then
		local se_obj = igi_helper.alife_obj(target_id)
		if se_obj then
			local sec = se_obj and se_obj:section_name() or "nil"
			printf("target "..tostring(target_id).." is "..sec)
		end 
	end
	if target_id == -1 then return end
	return target_id or (tsk.stage ~= 0 and tsk.task_giver_id) 	-- target_id or task_giver_id
end
--< Text >--------------------------------------------------
task_functor.igi_task_generic_text = function(task_id,field,p,tsk)
	--This function return a text for title_functor and descr_functor
	local CACHE = get_cache(task_id)

	if field == "descr" and tsk.stage == 2 then
		field = "done"
	end

	local text = igi_description.get_task_text(task_id, field)
	local desc = field ~= "title" and ("\\n "..CACHE.description) or ""

	return "[Igi] "..text..desc
end
--< Reward >--------------------------------------------------
xr_effects.igi_task_generic_finish = function(actor,npc,p)
	if not (p and p[1] and p[2]) then return end
	local task_id = p[1]
	local is_completed = p[2] == "true"
	local CACHE = get_cache(task_id)

	--Release
	igi_callbacks.invoke_target_callbacks("on_complete", CACHE, CACHE.target, is_completed)
	igi_subtask.finish_continuous_subtasks(CACHE.subtasks.continuous, is_completed)
	igi_helper.release_targets_in_world(CACHE.target)
	igi_subtask.unmark_all(CACHE.target)
	--Reward money
	if is_completed then
		igi_helper.reward_quest_money(CACHE.task_name)
		xr_effects.inc_task_stage(a, b, {task_id})
	end
	-- Goodwill
	igi_helper.change_goodwill(CACHE.factions.task_giver, CACHE.task_name, is_completed)
	--Reset stored data
	TASKS_CACHE[task_id] = nil
	--Finish
	xr_effects.drx_sl_unregister_task_giver(a, b, {task_id})
	xr_effects.drx_sl_reset_stored_task(a, b, {task_id})
end