TARGET_NAME = "shoot"
PATTERN = "basic"

----------------- Consistency -------------
entity_types = {
    "squad"
}
required_fields = {
    "section",
    "where"
}
optional_fields = {
    "weapon",           -- with which weapon to shoot
    "ammo_type",
    "shoot_any",        -- if true: any squad member; else: commander
    "keep_alive"        -- enemies mustn't die until end of quest
}
------------- END Consistency -------------

local TASK_STATUSES = igi_subtask.TASK_STATUSES
local WorldState = igi_world_state.WorldState

is_shotted = {}
local callback_is_set = {}

function on_game_start()
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
end

function save_state(m_data)
    m_data.igi_tasks_shoot_shotted = is_shotted
end

function load_state(m_data)
    is_shotted = m_data.igi_tasks_shoot_shotted or {}
end

local function create_callback_function(squad_id, target_ids, weapon, ammo_type)
    local function f(npc, shit)
        igi_helper.trace_dbg("shoot: callback: id", npc:id())
        if not target_ids[npc:id()] then return end
        if shit.draftsman:id() ~= 0 then return end

        local wpn = igi_helper.level_object(shit.weapon_id)
        if weapon and (wpn:section() ~= weapon) then return end

        if ammo_type then
	        local ammo_type_number = wpn:get_ammo_type()
	        local ammo_list = utils_item.get_ammo(wpn:section(), wpn:id())
	        local ammo_section = ammo_list[ammo_type_number+1]
            if ammo_section ~= ammo_type then return end
        end

        is_shotted[squad_id] = true
        UnregisterScriptCallback("npc_on_before_hit", f)
        UnregisterScriptCallback("monster_on_before_hit", f)
    end
    return f
end

local function get_target_ids(squad_id, shoot_any)
    local se_squad = WorldState.objects[squad_id]
    local ids = {}
    if shoot_any then
        for npc in se_squad:squad_members() do
            ids[npc.id] = true
        end
    else
        ids[se_squad:commander_id()] = true
    end
    return ids
end

local function set_callback(squad_id, weapon, ammo_type, shoot_any)
    local target_ids = get_target_ids(squad_id, shoot_any)
    igi_helper.trace_dbg("shoot: targets", target_ids)
    local f = create_callback_function(squad_id, target_ids, weapon, ammo_type)
    RegisterScriptCallback("npc_on_before_hit", f)
    RegisterScriptCallback("monster_on_before_hit", f)
    callback_is_set[squad_id] = f
end

function entity_on_after_target_creation(obj_data)
    local ids = get_target_ids(obj_data.id, obj_data.shoot_any)
    local targets = {}
    for id in pairs(ids) do
        local se_obj = WorldState.objects[id]
        local obj_entry = {
            id = se_obj.id,
            section_name = se_obj:section_name()
        }
        targets[#targets+1] = obj_entry
    end
    obj_data.shoot_targets = targets
end

function are_shoot_targets_alive(targets)
    for _,v in pairs(targets) do
        local se_obj = WorldState.objects[v.id]
        if not (se_obj and
            se_obj:section_name() == v.section_name and
            se_obj:alive()) then
                return true
        end
    end
end

function is_not_failed(obj_data)
    if not obj_data.keep_alive and is_shotted[obj_data.id] then
        return true
    else
        for _,v in pairs(obj_data.shoot_targets) do
            local se_obj = WorldState.objects[v.id]
            if not (se_obj and
                se_obj:section_name() == v.section_name and
                se_obj:alive()) then
                    return false
                end
        end
    end
    return true
end

function ready_to_finish(obj_data)
    if not is_shotted[obj_data.id] and not callback_is_set[obj_data.id] then
        igi_helper.trace_dbg("shoot: obj_data", obj_data)
        set_callback(obj_data.id, obj_data.weapon, obj_data.ammo_type, obj_data.shoot_any)
    end
    return is_shotted[obj_data.id]
end

function get_status(entity)
    if ready_to_finish(entity) then return TASK_STATUSES.READY_TO_FINISH
    elseif not is_not_failed(entity) then return TASK_STATUSES.FAILED end
    return TASK_STATUSES.RUNNING
end

function finish_subtask(obj_data)
    local callback = callback_is_set[obj_data.id]
    if callback then
        UnregisterScriptCallback("npc_on_before_hit", callback)
        UnregisterScriptCallback("monster_on_before_hit", callback)
        callback_is_set[obj_data.id] = nil
    end
    is_shotted[obj_data.id] = nil
end

function test(CACHE)
	if not CACHE then return true end -- test completed
    CACHE._test_stage = (CACHE._test_stage or 0) + 1

	local trace_assert = igi_helper.trace_assert
    local WorldState = igi_world_state.WorldState
	local entity = CACHE.entities[1]
	if CACHE._test_stage == 1 then
		local se_obj = igi_entities.get_binded_object(entity)
		trace_assert(se_obj, "Entity does not exist")
		db.actor:set_actor_position(se_obj.position)
        local se_obj = alife_create_item("wpn_mp133", WorldState.objects[0])
        CACHE._test_wpn_id = se_obj.id

    elseif CACHE._test_stage == 2 then
        local obj = igi_helper.level_object(CACHE._test_wpn_id)
		db.actor:make_item_active(obj)

        local se_squad = igi_entities.get_binded_object(entity)
        alife():teleport_object(se_squad:commander_id(),db.actor:game_vertex_id(),db.actor:level_vertex_id(),db.actor:position())

	elseif CACHE._test_stage == 4 then
		local se_squad = igi_entities.get_binded_object(entity)
        local npc = igi_helper.level_object(se_squad:commander_id())
        local dir = npc:position():sub(db.actor:position())
        db.actor:set_actor_direction(-dir:getH())
        level.press_action(DIK_keys.MOUSE_1)
        level.release_action(DIK_keys.MOUSE_1)
		
    elseif CACHE._test_stage == 5 then
		trace_assert(CACHE.status == "READY_TO_FINISH", "Quest did not complete")
        alife():release(WorldState.objects[CACHE._test_wpn_id])
		igi_tests.finish_test(CACHE.task_id)
		return true
	end
end
igi_tests.register_test("test_target_shoot", test, {
	entities = {
		{
			entity_type = "squad",
			faction = "&Faction(enemy of actor and enemy of taskgiver)&",
			section_name = "[this.faction]_sim_squad_novice",
			to_create = true,
			where = "[location_1_1.id]",
			target = "shoot"
		},

		{
			entity_type = "location",
			search_for = "smart",
			where = "0,0"
		}
	}
})
