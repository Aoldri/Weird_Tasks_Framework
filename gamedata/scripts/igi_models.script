local trace_assert = igi_helper.trace_assert
local trace_dbg = igi_helper.trace_dbg

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end

function actor_on_first_update()
	igi_models.add_interface_implementation('Entity', Entity)
	igi_models.add_interface_implementation(Cache.__cls, Cache)
end

Cache = {
	__cls = 'Cache',

	new = function (task_id, task_giver_id)
		local t = {
			task_id = task_id,
			task_giver_id = task_giver_id,
		}
		igi_models.set_class(t, Cache.__cls)
		return t
	end,

	from = function (tbl)
		local t = {}
		igi_models.set_class(t, Cache.__cls)
		copy_table(t, tbl)
		igi_taskdata.finalize_task_cache(t)
		trace_dbg('finalized', t)
		return t
	end,

	set_task_id = function (self, task_id)
		self.task_id = task_id
	end,

	get_task_id = function (self)
		return self.task_id
	end,

	set_task_giver_id = function (self, tg_id)
		self.task_giver_id = tg_id
	end,

	get_task_giver_id = function (self)
		return self.task_giver_id
	end,

	is_first_run = function (self)
		if self._first_run then return false end
		self._first_run = true
		return true
	end,
}

Entity = {
	get_target_table = function (self)
		return igi_taskdata.get_target_table(self.target or 'basic')
	end
}

classes = igi_utils.defaultdict(function () return {} end)

function add_interface_implementation(name, impl)
	-- You'd better know how Rust's impl blocks work
	trace_assert(name and impl, 'No name or impl: '..name, impl)
	local impl_t = classes[name]
	for k, v in pairs(impl) do
		impl_t[k] = v
	end
end

function set_class(tbl, cls)
	trace_assert(classes[cls], "Class unknown")
	setmetatable(tbl, {__index = classes[cls]})
end

function restore_object_interface(tbl)
	if not tbl.__cls then return end
	set_class(tbl, tbl.__cls)
	tbl.__cls = nil
end

function restore_interfaces_recursively(tbl)
	restore_object_interface(tbl)
	for _, v in pairs(tbl) do
		if type(v) == "table" then
			restore_interfaces_recursively(v)
		end
	end
end

function save_interfaces_recursively(tbl)
	tbl.__cls = tbl.__cls  -- from metatable to table
	for _, v in pairs(tbl) do
		if type(v) == "table" then
			save_interfaces_recursively(v)
		end
	end
end
