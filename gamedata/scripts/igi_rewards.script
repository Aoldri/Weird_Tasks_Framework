local function get_tg_and_tg_squad(tg)
	if tg:clsid() == clsid.online_offline_group_s then
		return igi_helper.alife_obj(tg:commander_id()), tg
	else
		return tg, get_object_squad(tg)
	end
end

local function get_tg_community_setup(se_tg, se_tg_squad)
	local community = get_object_community(se_tg)
	if string.find(community, "trader") then
		local community_setup = igi_db.get_value("misc.ltx", "trader_faction", se_tg:section_name())
		return community_setup or {se_tg_squad:get_squad_community()}
	else
		return {community}
	end
end

local function get_community_setup(tg_id)
	local se_tg = igi_helper.alife_obj(tg_id)
	return get_tg_community_setup(get_tg_and_tg_squad(se_tg))
end

local function update_reward_values(entity, values)
	local target_tbl = igi_taskdata.get_target_table(entity.target)
	local reward, fail = values.reward, values.fail

	reward.goodwill = reward.goodwill + target_tbl.get_goodwill_reward(entity)
	fail.goodwill = fail.goodwill + target_tbl.get_goodwill_fail(entity)

	reward.money = reward.money + target_tbl.get_money_reward(entity)
	fail.money = fail.money + target_tbl.get_money_fail(entity)
end

local function collect_rewards(CACHE)
	local values = {
		reward = {goodwill = 0, money = 0},
		fail = {goodwill = 0, money = 0}
	}

	for _, entity in pairs(CACHE.target) do
		if entity.target then
			update_reward_values(entity, values)
		end
	end
	return values
end

function define_reward(CACHE, task_giver_id)
	local task_data = igi_taskdata.get_task_data(CACHE.task_id)

	local reward = dup_table(task_data.reward or {})
	local fail = dup_table(task_data.fail or {})

	local possible_reward = collect_rewards(CACHE)
	possible_reward.reward.community = get_community_setup(task_giver_id)
	possible_reward.fail.community = possible_reward.reward.community
	
	for k,v in pairs(possible_reward.reward) do
		reward[k] = reward[k] or v
	end

	for k,v in pairs(possible_reward.fail) do
		fail[k] = fail[k] or v
	end

	return reward, fail
end

function give_rewards(complete_rewards, fail_rewards, is_completed)
	local rewards = is_completed and complete_rewards or fail_rewards
	-- Money
	xr_effects.reward_random_money(nil, nil, {rewards.money*0.8, rewards.money*1.1})
	-- Goodwill (1/gaussian_sum to last community, 2/sum to second last, ..., 1/2 to first)
	if not rewards.community then return end
	local parts = (#rewards.community)*(#rewards.community+1)/2
	for i=1,#rewards.community do
		local value = math.floor((i*rewards.goodwill)/parts)
		local faction = rewards.community[#rewards.community+1-i]
		xr_effects.complete_task_inc_goodwill(nil, nil, {value, faction})
	end
end
