TYP = igi_subtask.TARGET_TYPES.CONTINUOUS
TARGET_NAME = "fetch"
PATTERN = "basic"

local trace_assert = igi_helper.trace_assert

function ready_to_finish(obj_data)
	local section = obj_data.section_name
	local item = section and db.actor:object(section)
	local actor = db.actor
	if item then
		return utils_item.get_amount(db.actor, section, 1) >= obj_data.how_much
	elseif section and string.find(section, "af_") then
		return actor:object(section .. "_af_aam")
		or actor:object(section .. "_af_iam")
		or actor:object(section .. "_af_aac")
		or actor:object(section .. "_lead_box")
	end
	return false
end

function finish_subtask(obj_data)
	local amt = obj_data.how_much or 1
	xr_effects.remove_item(nil, nil, {obj_data.section_name, amt})
end

function entity_on_get_taskdata(entity)
	-- change amount with "how_much" bcs amount is target creation flag
	entity.how_much = entity.amount
	entity.amount = 1

	-- nothing to show on map obviously
	entity.not_on_map = true
end

function quest_target(obj_data)
	if not ready_to_finish(obj_data) then return -1 end
end

function setup_item(item_info, factions)
	local sec_name = item_info.section

	trace_assert(ini_sys:section_exist(sec_name or "nil"))
	local text_name = ini_sys:r_string_ex(sec_name, "inv_name")
	local desc_target = game.translate_string(text_name)..", "..tostring(item_info.how_much)

	local item_data = igi_models.create_ItemData(nil, sec_name, nil, item_info.how_much)
	local desc = igi_models.create_DescriptionData(nil, desc_target)
	return item_data, desc
end

function create_item(group_data)
	local items = {}
	local link = igi_linker.make_link("item", group_data.group_id, 1)
	items[link] = group_data
	return items
end

local function get_cost_summed(entity)
	local cost = ini_sys:r_string_ex(entity.section_name, "cost")
	return tonumber(cost)*entity.how_much
end

function get_money_reward(entity)
	return get_cost_summed(entity)
end

function get_goodwill_reward(entity)
	local cost_sum = get_cost_summed(entity)
	return 15 + math.floor(cost_sum/1000)
end

function get_goodwill_fail(entity)
	local cost_sum = get_cost_summed(entity)
	return -75 + math.floor(cost_sum/800)
end
