
local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert
local WorldState = igi_world_state.WorldState

local function table_find(tbl, val)
	for k, v in pairs(tbl) do
		if v == val then return k end
	end
end
Cache = {
	get_description = function (self)
		if not self.description then
			self:_prepare_description()
		end
		return self.description:get_description()
	end,

	_prepare_description = function (self)
		local desc = TaskDescription.new()
		for _, entity in pairs(self:get_entities()) do
			if entity.entity_type == "location" then
				desc:setup_location(entity)
			end
		end

		for _, entity in pairs(self:get_entities()) do
			desc:add_from_entity(entity)
		end
		self.description = desc
	end,

	get_task_text_function = function (self)
		local title = "[WTF] "..get_task_text(self.task_id, "title")
		local text = self:get_description()
		local icon = task_manager.task_ini:r_string_ex(self.task_id, "icon")
		icon = icon or "ui_iconsTotal_mutant"

		return function ()
			db.actor:give_talk_message2(title, text, icon, "iconed_answer_item")
			return true
		end
	end,
}

TaskDescription = {
	__cls = "TaskDescription",

	new = function ()
		local t = {
			targets = DescriptionItem:new(),
			locations = DescriptionItem:new(),
			factions = DescriptionItem:new(),
			_location_links = {}
		}
		return setmetatable(t, {__index = TaskDescription})
	end,

	add_from_entity = function (self, entity)
		if entity.no_description then return end
		local target_tbl = entity:get_target_table()
		local desc = target_tbl.get_description(entity)
		for k, tbl in pairs(desc) do
			self:link_locations(tbl)
			for _, v in pairs(tbl) do
				self[k]:add(v)
			end
		end
	end,

	get_description = function (self)
		self._location_links = nil
		local content = {}
		for label, v in pairs(self) do
			content[#content+1] = v:to_string(label)
		end

		return table.concat(content, "\\n")
	end,

	link_locations = function (self, tbl)
		for k, v in pairs(tbl) do
			if igi_linker.Link.is_link(v) then
				local dep = igi_linker.Link.from(v)
				tbl[k] = self._location_links[dep:get_link()]
			end
		end
	end,

	setup_location = function (self, entity)
		self._location_links[entity:get_link()] = igi_target_basic.get_location_description(entity)
	end,
}

DescriptionItem = {
	__cls = "DescriptionItem",
	label = "",

	new = function (self)
		return setmetatable({}, {__index = DescriptionItem})
	end,

	add = function (self, value)
		if not table_find(self, value) then
			self[#self+1] = value
		end
	end,

	_get_item_string = function (item)
		return game.translate_string(item)
	end,

	to_string = function (self, label)
		if not next(self) then return "" end

		local details = {}
		for i, value in ipairs(self) do
			details[i] = self._get_item_string(value)
		end

		label = game.translate_string(igi_db.TEXT_HEADER..label)
		return label..": "..table.concat(details, ', ')
	end,
}

function get_task_text(task_id, field)
	-- returns exclusive task text if exists
	local text_id = igi_db.TEXT_HEADER..task_id.."_"..field
	local text = game.translate_string(text_id)
	if text ~= text_id then return text end

	-- fallback to basic field for this task type
	local prefix, task_name = igi_helper.get_task_name(task_id)
	text_id = igi_db.TEXT_HEADER..prefix.."_"..task_name.."_"..field
	text = game.translate_string(text_id)
	if text ~= text_id then return text end

	-- fallback to basic field
	return game.translate_string(igi_db.TEXT_HEADER..field)
end
