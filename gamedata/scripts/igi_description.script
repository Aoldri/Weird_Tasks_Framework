
local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert
local WorldState = igi_world_state.WorldState

function on_game_start()
	RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end

function actor_on_first_update()
	igi_models.add_interface_implementation("Cache", Cache)
	igi_models.add_interface_implementation('TaskDescription', TaskDescription)
	igi_models.add_interface_implementation("DescriptionItem", DescriptionItem)
	igi_models.add_interface_implementation("LocationDescription", LocationDescription)
	igi_models.add_interface_implementation("TargetDescription", TargetDescription)
	igi_models.add_interface_implementation("FactionDescription", FactionDescription)
end

local function table_find(tbl, val)
	for k, v in pairs(tbl) do
		if v == val then return k end
	end
end
Cache = {
	get_description = function (self)
		if not self.description then
			self:_prepare_description()
		end
		return self.description:get_description()
	end,

	_prepare_description = function (self)
		local desc = TaskDescription.new()
		local entities = self:get_entities()
		for _, entity in pairs(entities) do
			desc:add_from_entity(entity, entities)
		end
		self.description = desc
	end,

	get_task_text_function = function (self)
		local title = "[WTF] "..get_task_text(self.task_id, "title")
		local text = self:get_description()
		local icon = task_manager.task_ini:r_string_ex(self.task_id, "icon")
		icon = icon or "ui_iconsTotal_mutant"

		return function ()
			db.actor:give_talk_message2(title, text, icon, "iconed_answer_item")
			return true
		end
	end,
}

TaskDescription = {
	__cls = "TaskDescription",

	new = function ()
		local t = {
			targets = TargetDescription:new(),
			locations = LocationDescription:new(),
			factions = FactionDescription:new(),
		}
		igi_models.set_class(t, TaskDescription.__cls)
		return t
	end,

	add_from_entity = function (self, entity, entities)
		local target_tbl = entity:get_target_table()
		local desc = target_tbl.get_description(entity)
		for k, tbl in pairs(desc) do
			for _, v in pairs(tbl) do
				self[k]:add(v, entities)
			end
		end
	end,

	get_description = function (self)
		local content = {}
		for _, v in pairs(self) do
			content[#content+1] = v:to_string()
		end

		return table.concat(content, "\\n")
	end,
}

DescriptionItem = {
	__cls = "DescriptionItem",
	label = "",

	new = function (self)
		local t = {}
		igi_models.set_class(t, self.__cls)
		return t
	end,

	add = function (self, value)
		if not table_find(self, value) then
			self[#self+1] = value
		end
	end,

	_get_item_string = function (item)
		return game.translate_string(item)
	end,

	to_string = function (self)
		if not next(self) then return "" end

		local details = {}
		for i, value in ipairs(self) do
			details[i] = self._get_item_string(value)
		end

		local label = game.translate_string(igi_db.TEXT_HEADER..self.label)
		return label..": "..table.concat(details, ', ')
	end,
}

LocationDescription = {
	__cls = "LocationDescription",
	label = "locations",

	new = DescriptionItem.new,

	_get_location_description = function (link, entities)
		if not igi_linker.is_dependency(link) then return link end

		local dep = igi_linker.Dependency.from(link)
		local location = dep:get_linked_entity(entities)
		if location.smarts then
			local smart_id = location.smarts[1]
			local smart_name = SIMBOARD.smarts[smart_id].smrt:name()
			return "st_"..smart_name.."_name"
		end
		return location.where
	end,

	add = function (self, value, entities)
		if not table_find(self, value) then
			self[#self+1] = self._get_location_description(value, entities)
		end
	end,

	_get_item_string = function (item)
		if type(item) == "number" then
			local se_obj = WorldState.objects[item]
			return dynamic_news_helper.GetPointDescription(se_obj)
		end
		return game.translate_string(item)
	end,

	to_string = DescriptionItem.to_string,
}

TargetDescription = {
	__cls = "TargetDescription",
	label = "targets",

	new = DescriptionItem.new,
	add = DescriptionItem.add,
	_get_item_string = DescriptionItem._get_item_string,
	to_string = DescriptionItem.to_string,
}

FactionDescription = {
	__cls = "FactionDescription",
	label = "factions",

	new = DescriptionItem.new,
	add = DescriptionItem.add,
	_get_item_string = DescriptionItem._get_item_string,
	to_string = DescriptionItem.to_string,
}

function get_task_text(task_id, field)
	-- returns exclusive task text if exists
	local text_id = igi_db.TEXT_HEADER..task_id.."_"..field
	local text = game.translate_string(text_id)
	if text ~= text_id then return text end

	-- fallback to basic field for this task type
	local prefix, task_name = igi_helper.get_task_name(task_id)
	text_id = igi_db.TEXT_HEADER..prefix.."_"..task_name.."_"..field
	text = game.translate_string(text_id)
	if text ~= text_id then return text end

	-- fallback to basic field
	return game.translate_string(igi_db.TEXT_HEADER..field)
end
