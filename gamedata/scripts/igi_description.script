-- TaskDescription class
-- Takes care of all description preparations, get_description will return description string

TaskDescription = {}
TaskDescription.fields = {
	"targets", 
	"locations", 
	"factions",
}

function TaskDescription.new()
	local tbl = {
		targets = {},
		locations = {},
		factions = {},
	}
	
	setmetatable(tbl, {__index = TaskDescription})
	return tbl
end

function TaskDescription.add_entries(self, tbl)
	if not tbl then return end
	assert(tbl._cls == "DescriptionData")
	
	for _, field in pairs(self.fields) do
		igi_utils.extend_list(self[field], tbl[field])
	end
end

function TaskDescription._delete_duplicates_in_list(tbl)
	if not tbl then return nil end
	
	local values_set = {}
	local new_tbl = {}
	for k, v in pairs(tbl) do
		if not values_set[v] then
			table.insert(new_tbl, v)
			values_set[v] = true
		end
	end
	return new_tbl
end

function TaskDescription._delete_duplicates(self)
	for _, field in pairs(self.fields) do
		self[field] = self._delete_duplicates_in_list(self[field])
	end
end

function TaskDescription._delete_empty(self)
	for _, field in pairs(self.fields) do
		if not next(self[field]) then self[field] = nil end
	end
end

function TaskDescription._text_line(name, detail)
	-- return "%c[d_orange]"..name..": ".."%c[0,255,255,255]"]]..detail
	return name..": "..detail
end

function TaskDescription._setup_description(self)
	local content = ""

	for k, v in pairs(self) do
		local label = game.translate_string(igi_db.TEXT_HEADER..k)
		local details = ""
		
		for key, value in pairs(v) do
			if key > 1 then details = details .. ', ' end
			details = details .. game.translate_string(value)
		end

		local text = self._text_line(label, details)
		content = content .. text .. "\\n "
		self[k] = nil
	end

	return content
end

function TaskDescription.get_description(self, cache)
	self:_link(cache.setup)
	self:_delete_duplicates()
	self:_delete_empty()

	return self:_setup_description()
end

function TaskDescription._link(self, setup_entities)
	if not setup_entities then return end
	
	for k, location in pairs(self.locations) do
		if string.find(location, "%$smart") then
			group, id = string.match(location, "_(%d+)_(%d+)")
			assert(group and id, "Igi: description: smart unlinkable: "..location)

			local smart_name = setup_entities["$smart_"..group.."$"].names[tonumber(id)]
			self.locations[k] = "st_"..smart_name.."_name"
		end
	end
end

------------------------------------------------------------

function get_task_text(task_id, field)
	if not task_id then callstack() end
	-- returns exclusive task text if exist; basic otherwise
	local text_id = igi_db.TEXT_HEADER..task_id.."_"..field
	local text = game.translate_string(text_id)
	
	-- fallback to basic field for this task type
	if text == text_id then
		printe("Igi: no text for task "..text)
		local task_name = igi_helper.get_task_name(task_id)
		text_id = igi_db.TEXT_HEADER..task_name.."_"..field
		text = game.translate_string(text_id)

		-- fallback to basic field
		if text == text_id then
			printe("Igi: no generic text, fallback")
			text = game.translate_string(igi_db.TEXT_HEADER..field)
		end
	end
	return text
end

function get_postpone_intel(task_id, desc)
	local task_name = igi_helper.get_task_name(task_id)
	local icon = task_manager.task_ini:r_string_ex(task_id, "icon")

	local postpone_intel = {
		caption = "[Igi] "..get_task_text(task_id, "title"),
		text = desc,
		icon = icon or "ui_iconsTotal_mutant"
	}
	return postpone_intel
end

function postpone_function(intel)
	db.actor:give_talk_message2(intel.caption, intel.text, intel.icon, "iconed_answer_item")
	return true
end

function decolorize(text)
	return text:sub("(%%c%[.-%])", "")
end
