local trace_dbg = igi_helper.trace_dbg
local trace_assert = igi_helper.trace_assert

synsugar_handlers = {}
synsugar_entity_handlers = {}

function add_handler(handler)
    if not type(handler) == "function" then
        trace_dbg("synsugar: handler is not function")
        return
    end
    synsugar_handlers[handler] = true
end

function add_entity_handler(handler)
    if not type(handler) == "function" then
        trace_dbg("synsugar: handler is not function")
        return
    end
    synsugar_entity_handlers[handler] = true
end

function desugarize(cache)
    for handler in pairs(synsugar_handlers) do
        handler(cache)
    end

    for _, entity in pairs(cache.setup) do
        for handler in pairs(synsugar_entity_handlers) do
            handler(entity)
        end
    end
end

function set_default_amount(entity)
    if not entity.amount then entity.amount = 1 end
end
add_entity_handler(set_default_amount)

function set_default_creation_location(entity)
    if (not entity.where) and entity.to_create ~= false and entity.entity_type ~= "location" then
        entity.where = "$location_1_1.id$"
    end
end
add_entity_handler(set_default_creation_location)

function create_by_default(entity)
    if (entity.entity_type == "squad"
            or entity.entity_type == "item")
            and entity.to_create == nil then
        entity.to_create = true
    end
end
add_entity_handler(create_by_default)


local function finalize_value_dependencies(k, v, tbl)
    if type(v) ~= "string" then return end

    if string.find(k, "link") then
        tbl[k] = igi_linker.Dependency(v):get_link()
    else
        tbl[k] = igi_linker.finalize_all_dependencies(v)
    end
end

function finalize_all_dependencies(CACHE)
    igi_utils.iterate_table(CACHE, finalize_value_dependencies)
end
add_handler(finalize_all_dependencies)

function unfold_inline_location(CACHE)
    local new_locations = {}
    for _, entity in ipairs(CACHE.setup) do
        if entity.entity_type ~= "location" and
                entity.to_create ~= false and
                entity.where and
                igi_finder.location_keys[entity.where] then
            local location = {
                entity_type = "location",
                where = entity.where,
                amount = 1
            }
            new_locations[#new_locations+1] = location
            entity.where = "$location_"..tostring(CACHE.group_counter.location + #new_locations).."_1.id$"
        end
    end

    for _, loc in ipairs(new_locations) do
        CACHE.setup[#CACHE.setup+1] = loc
        CACHE.group_counter.location = CACHE.group_counter.location + 1
    end
end
add_handler(unfold_inline_location)
