local function is_parent_dead(obj_data)
	local se_obj = igi_helper.igi_alife_obj(obj_data.id)
	local parent = igi_helper.igi_alife_obj(se_obj.parent_id)
	return not parent:alive()
end

local function is_low_condition(obj_data, se_obj)
	local cond = se_obj and se_obj.condition and se_obj:condition()
	--printf(se_obj:id().." "..cond)
	return cond < 0.9
end
------------------------------------------
local function change_squad_role(squad_data, obj, role, CACHE)
	local factions = igi_db.TableView.new("squads\\squad_guard.ltx", "guard")
	if not CACHE.factions[role] and not factions[role] then
		printf("IGI: change role: role unknown")
		return
	end
	if type(role) == table then
		printf("Igi: role is table")
		_, role = next(role)
	end
	role = CACHE.factions[role] or role		-- if role is not in CACHE => role is actual faction
	igi_helper.change_squad_faction(squad_data.id, role)
end

local function repair_item(item_data, item, arg, CACHE)
	if item then
		item:set_condition(math.random(90,100)/100)
	end
end
------------------------------------------
--[[local function do_activities(obj_data, condition, se_obj, CACHE)
	local action_handlers = {
		['change_faction'] = change_squad_role,
		['repair'] = repair_item,
	}
	
	for action, args in pairs(obj_data.online_activities[condition]) do
		if action_handlers[action] then
			action_handlers[action](obj_data, se_obj, args, CACHE)
		else
			printf("Igi: unknown action: "..action.." with object: "..obj_data.section_name)
		end
	end
end	--]]

function do_online_activities(CACHE)
	if not CACHE.online_activities then return CACHE, false end
	local condition_handlers = {
		["on_parent_death"] = is_parent_dead,
		["if_low_condition"] = is_low_condition,
	}
	
	local action_handlers = {
		['change_faction'] = change_squad_role,
		['repair'] = repair_item,
	}

	local is_changed = false
	for condition, objects in pairs(CACHE.online_activities) do
		for k, obj_data in pairs(objects) do

			se_obj = igi_helper.level_object(obj_data.id)
			if se_obj then
				-- If condition is true
				if condition == "is_online" or condition_handlers[condition](obj_data, se_obj, CACHE) then
					
					-- Do every activity with this condition
					for action, args in pairs(obj_data.online_activities[condition]) do
						if action_handlers[action] then

							action_handlers[action](obj_data, se_obj, args, CACHE)
						end
					end
					
					-- Delete object after activity is done
					objects[k] = nil
					is_changed = true
				end
			end
		end
		-- delete activities if there's no more objects
		if not next(objects) then CACHE.online_activities[condition] = nil end
	end
		-- delete the whole section
	if not next(CACHE.online_activities) then CACHE.online_activities = nil end
	return CACHE, is_changed
end

function sort_online_activities(CACHE)
	-- Adds all objects with online activities to CACHE
	-- CACHE.online_activities = {*condition* = {*list of obj_data*}}
	local online_acts = {}
	for _, entity in pairs(CACHE.target) do
		if entity.online_activities then
			for condition, actions in pairs(entity.online_activities) do
				if not online_acts[condition] then online_acts[condition] = {} end
				online_acts[condition][#online_acts[condition] + 1] = entity
			end
		end
	end
	CACHE.online_activities = online_acts
	return CACHE
end
