-- =============================================================
--	Config reader (igi_db.script)
--	Anomaly 1.5.5.0
--	Igigog
-- =============================================================

TEXT_HEADER = "igi_task_text_"
local database_folder = "igi_tasks\\"

--------------------------------------------


local function parse_values(str)
	if not str then return nil end
	local values = {}
	for value in string.gmatch(str, "([^,]+)") do
		if value == "true" or value == "false" then
			value = value == "true"
		end
		
		table.insert(values, tonumber(value) or value)
	end
	if #values == 1 then return values[1] end
	return values
end

local function get_table(file, section)
	if not file or not section then return end
	local tbl = {}
	local config = ini_file(database_folder..file)
	if not (config and config:section_exist(section)) then return end

	for i=0, config:line_count(section) - 1 do
		local _, key = config:r_line(section, i, "", "")
		values_str = config:r_string(section, key)
		if not values_str then
			table.insert(tbl, key)
		else
			local values = parse_values(values_str)
			tbl[key] = values
		end
	end
	return tbl
end

function get_value(file, section, key)
	if not file or not section or not key then return nil end
	
	local ini = ini_file(database_folder..file)
	if not ini:section_exist(section) then return nil end
	if not ini:line_exist(section, key) then return nil end
	return parse_values(ini:r_string(section, key))
end

-------------------------------------------------------
-- Looks like table, behaves like table, but takes keys and values from ini_file
SectionView = {}
SectionView.mt = {}
SectionView.methods = {}

function SectionView.new (file, section)
	if not file then
		callstack()
		assert(nil, "Igi: SectionView.new: no file "..file.." or section "..section)
	end
	if not section then return nil end

	view = {['filename'] = file, 
			['section'] = section,
			['custom'] = {}
			}

	view.ini = ini_file(database_folder..file)
	if not view.ini then
		callstack()
		assert(nil, "Igi: SectionView.new: no such file: "..file)
	end
	
	if not view.ini:section_exist(section) then return nil end
	for k, method in pairs(SectionView.methods) do
		view[k] = method
	end
	
	setmetatable(view, SectionView.mt)
	return view
end

SectionView.mt.__index = function (tbl, key)
	if not key then return end
	if tbl.custom[key] then return tbl.custom[key] end
	local values_str
	local line_key
	if type(key) == "number" then
		if tbl.ini:line_count(tbl.section) < key then
			-- printf("Igi: No line "..key.." in file "..tbl.filename.." section "..tbl.section)
			return nil 
		end
		_, line_key, values_str = tbl.ini:r_line_ex(tbl.section, key-1)
	else
		if not tbl.ini:line_exist(tbl.section, key) then
			-- printf("Igi: No line "..key.." in file "..tbl.filename.." section "..tbl.section)
			return nil
		end
		values_str = tbl.ini:r_string_ex(tbl.section, key)
	end
	if not values_str then return line_key end
	return parse_values(values_str)
end

SectionView.mt.__newindex = function (tbl, k, v)
	tbl.custom[k] = v
end

SectionView.mt.__len = function (tbl)
	return tbl.ini:line_count(section) + #tbl.custom
end

SectionView.methods.as_table = function (tbl)
	-- Lua 5.1 sucks, so you need to use this table for pairs()
	local new_tbl = get_table(tbl.filename, tbl.section)
	for k, v in pairs(tbl.custom) do
		new_tbl[k] = v
	end
	return new_tbl
end

SectionView.methods.as_set = function (tbl)
	local new_tbl = get_table(tbl.filename, tbl.section)
	set = {}
	for _, v in pairs(new_tbl) do
		set[v] = true
	end
	
	for _, v in pairs(tbl.custom) do
		set[v] = true
	end
	return set
end

SectionView.methods.random = function(tbl)
	-- Ебал рот для кастомных ключей тоже прописывать
	local line = igi_random.rand(tbl.ini:line_count(tbl.section)) - 1
	local _, key, values_str = tbl.ini:r_line_ex(tbl.section, line)
	-- delete newline char
	values_str = string.match(values_str, "^%s*(%S.+)%s*")
	local value = values_str and parse_values(values_str) or key
	return value, key
end










