TARGET_NAME = "escort"
PATTERN = "basic"

local TASK_STATUSES = igi_subtask.TASK_STATUSES
local trace_assert = igi_helper.trace_assert
local WorldState = igi_world_state.WorldState


function entity_on_after_target_creation(entity)
	local squad = WorldState.objects[entity.id]
	trace_assert(squad, "escort: no squad")

	axr_companions.companion_squads[squad.id] = squad
	for k in squad:squad_members() do
		local se_obj = k.object or k.id and WorldState.objects[k.id]
		se_save_var(se_obj.id,se_obj:name(),"companion",true)
		se_save_var(se_obj.id,se_obj:name(),"companion_cannot_dismiss",true)
		se_save_var(se_obj.id,se_obj:name(),"companion_cannot_teleport",entity.cant_teleport == "true")
	end

	-- Add to ignore offline combat simulation list
	sim_offline_combat.task_squads[squad.id] = true
end

function get_status(entity)
    return TASK_STATUSES.READY_TO_FINISH
end

function entity_on_complete(entity)
    local se_squad = igi_entities.get_binded_object(entity)
	igi_helper.trace_dbg("compation 1")
    axr_companions.dismiss_special_squad(se_squad)
	igi_helper.trace_dbg("compation 2")
end

function test(CACHE)
	if not CACHE then return true end -- test completed

	local trace_assert = igi_helper.trace_assert
	local entity = CACHE.entities[1]
	local se_squad = igi_entities.get_binded_object(entity)
	for member in se_squad:squad_members() do
		local se_npc = igi_world_state.WorldState.objects[member.id]
		trace_assert(
			se_load_var(se_npc.id, se_npc:name(), "companion"), "Not in actor's squad")
	end
	trace_assert(entity.status == "READY_TO_FINISH", "Quest did not complete")
	igi_tests.finish_test(CACHE.task_id)
	return true
end
igi_tests.register_test("test_target_escort", test, {
	entities = {
		{
			entity_type = "squad",
			faction = "&Faction(friend of actor and friend of taskgiver)&",
			section_name = "[this.faction]_sim_squad_novice",
			to_create = true,
			where = "[location_1_1.id]",
			target = "escort"
		},

		{
			entity_type = "location",
			search_for = "smart",
			where = "0,0"
		}
	}
})
