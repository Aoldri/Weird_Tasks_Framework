-- There are purely utility functions, not bound with tasks or STALKER

function list_to_set(l)
	if(l == nil) then return nil end
	
	local set = {}
	for _, v in pairs(l) do
		assert(type(v) ~= "table", "list_to_set values mustn't be tables")
		set[v] = true
	end
	return set
end

function set_to_list(s)
	if(s == nil) then return nil end
	
	local list = {}
	for v, _ in pairs(s) do
		list[#list + 1] = v
	end
	return list
end

function random_table_element(tbl)
	-- It's preffered to use lists with igi_random.rand rather
	-- than this function bcs this function is slow
	local keyset = {}
	for k in pairs(tbl) do
		table.insert(keyset, k)
	end
	-- now you can reliably return a random key
	local random_key = keyset[igi_random.rand(#keyset)]
	local random_elem = tbl[random_key]
	return random_elem, random_key
end

function get_random_items(orig_list, amount)
	if not orig_list or #orig_list < amount then
		return nil, "Not enough items"
	end

	local set = {}
	local list = {}
	for i=1, amount do
		local item
		repeat
			item = orig_list[igi_random.rand(#orig_list)]
		until not set[item]
		list[#list + 1] = item
		set[item] = true
	end
	return list
end

function extend_list(orig, val)
	-- add value to a list or add every value if val is a list
	if type(val) == 'table' then
		for _, v in pairs(val) do orig[#orig + 1] = v end
	else orig[#orig + 1] = val end
	return orig
end

function add_to_list_recursive(tbl, val, ...)
	if not tbl then return end

	local args = {...}
	for k, v in pairs(args) do
		if not tbl[v] then
			tbl[v] = {}
		end
		tbl = tbl[v]
		if k == #args then
			table.insert(tbl, val)
		end
	end
end

function memoize_one_variable(f)
    local cache = {}
    return function (arg)
		local key = arg ~= nil and arg or "!nil!"
        if cache[key] then
            return cache[key]
        else
            local y = f(arg)
            cache[key] = y
            return y
        end
    end
end
















