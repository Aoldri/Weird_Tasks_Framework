local function create_target_entry(se_obj)
	if not se_obj then return end

	local entry = {
		id = se_obj.id,
		section_name = se_obj:section_name()
	}
	return entry
end

local function add_entry(tbl, typ, group_id, entity_id, se_obj)
	if not (tbl and typ and group_id and entity_id and se_obj) then
		callstack()
		assert(nil, "Igi: Something went wrong while adding entry")
	end
	
	local id = igi_linker.make_link(typ, group_id, entity_id)
	tbl[id] = create_target_entry(se_obj)
end

local function create_squad(group_data)
	local squads = {}
	
	for i=1, group_data.amount or 1 do
		local squad = utils_obj.create_squad(group_data.name, group_data.location)
		squad.stay_time = game.get_game_time()
		squad.force_online = true

		if group_data.items then
			local commander = igi_helper.alife_obj(squad:commander_id())
			for item, amount in pairs(items) do
				alife():create(item, commander:position(), commander.m_level_vertex_id, commander.m_game_vertex_id, commander:id())
			end
		end
		add_entry(squads, group_data.entity_type, group_data.group_id, i, squad)
		--squads[igi_linker.make_id("squad", group_data.group_id, i)] = create_target_entry(squad)
	end
	
	return squads
end

local function create_package(group_data)
	local packages = {}
	local smart_data = SIMBOARD.smarts_by_names[group_data.location]
	local location = vector():set( --Make sure it don't fall under the ground
		smart_data.position.x,
		smart_data.position.y + 1,
		smart_data.position.z)
	for i=1, group_data.amount or 1 do
		local se_obj = alife_create(group_data.section_name, location, smart_data.m_level_vertex_id, smart_data.m_game_vertex_id)
		assert(se_obj, "Igi: impossible to create package: "..group_data.section_name.." at "..group_data.location)

		add_entry(packages, group_data.entity_type, group_data.group_id, i, se_obj)
	end
	return packages
end

local function create_item(group_data)
	local items = {}
	if group_data.ids then
		for i, id in pairs(group_data.ids) do
			local se_obj = igi_helper.alife_obj(id)
			add_entry(items, group_data.entity_type, group_data.group_id, i, se_obj)
		end
	end
	return items
end

local function check_smart(group_data)
	smarts = {}
	for i, smart_name in pairs(group_data.names) do
		local smart_data = {['smart_name'] = smart_name}
		xr_effects.clear_smart_terrain(nil, nil, {smart_name,})
		smarts[igi_linker.make_link("smart", group_data.group_id, i)] = smart_data
	end
	return smarts
end

function create_target(entities_setup, task_name)
	local handlers = {
		["package"] = create_package,
		["squad"] = create_squad,
		["item"] = create_item,
		["smart"] = check_smart,
	}
	local targets = {}
	local order = igi_linker.get_order(task_name)
	
	for _, group_link in pairs(order) do
		local entity_setup = entities_setup[group_link]
		local handler = assert(handlers[entity_setup.entity_type], 
				"Igi: Unknown entity type: "..entity_setup.entity_type)

		-- printf("linking "..igi_linker.make_id(entity.entity_type, entity.group_id))
		igi_linker.link(entity_setup, targets)
		local group_data = handler(entity_setup)

		for link, target in pairs(group_data) do
			target.target = entity_setup.target
			target.online_activities = entity_setup.online_activities
			targets[link] = target
		end
	end

	return targets
end
