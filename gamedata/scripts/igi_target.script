
local trace_dbg = igi_helper.trace_dbg

function create_target_entry(se_obj)
	if not se_obj then return end

	local entry = {
		id = se_obj.id,
		section_name = se_obj:section_name()
	}
	return entry
end

function add_entry(tbl, typ, group_id, entity_id, se_obj)
	if not (tbl and typ and group_id and entity_id and se_obj) then
		callstack()
		assert(nil, "Igi: Something went wrong while adding entry")
	end
	
	local id = igi_linker.make_link(typ, group_id, entity_id)
	tbl[id] = create_target_entry(se_obj)
end

function create_target(entities_setup, task_name)
	trace_dbg("create target "..task_name, entities_setup)
	local targets = {}
	local order = igi_linker.get_order(task_name)
	trace_dbg("order", order)
	
	for _, group_link in pairs(order) do
		local entity_setup = entities_setup[group_link]
		local target_tbl = igi_taskdata.get_target_table(entity_setup.target or "basic")
		local handler = target_tbl["create_"..entity_setup.entity_type]
		
		igi_linker.link(entity_setup, targets)
		local group_data = handler(entity_setup)
		trace_dbg("linked entities", group_data)

		for link, target in pairs(group_data) do
			target.where_link = entity_setup.where_link
			target.target = entity_setup.target
			target.online_activities = entity_setup.online_activities
			targets[link] = target
		end
	end
	return targets
end
