-- local trace_dbg = igi_helper.trace_dbg
-- local trace_assert = igi_helper.trace_assert

function on_game_start()
    RegisterScriptCallback("server_entity_on_register", server_entity_on_register)
	RegisterScriptCallback("server_entity_on_unregister", server_entity_on_unregister)
    RegisterScriptCallback("actor_on_first_update", actor_on_first_update)
end

function server_entity_on_register(se_obj)
	add_to_objects(se_obj)
end

function server_entity_on_unregister(se_obj)
	remove_from_objects(se_obj)
end

function actor_on_first_update()
	igi_models.add_interface_implementation("Entity", Entity)
	igi_models.add_interface_implementation("Cache", Cache)

    WorldState.sim = alife()
    WorldState.gg = game_graph()
    CreateTimeEvent("igi_world_state", "fill_objects", 0, fill_objects)
    sort_levels_by_distance()
	sort_smarts_by_level()
end

Entity = {
	get_se_obj = function (self)
		igi_helper.trace_assert(self.id and self.section_name, 'No id or section', self)
		local se_obj = WorldState.objects[self.id]
		if not se_obj then return end
		return se_obj:section_name() == self.section_name and se_obj or nil
	end,

	is_in_world = function (self)
		local se_obj = self:get_se_obj()
		return se_obj and se_obj.parent_id == 65535
	end,

	release = function (self)
		if self.entity_type == 'item' then
			local se_obj = self:get_se_obj()
			if se_obj then
				safe_release_manager.release(se_obj)
			end
			return
		end

		if self.entity_type == 'squad' then
			local se_obj = self:get_se_obj()
			if se_obj then
				SIMBOARD:remove_squad(se_obj)
			end
			return
		end
	end,
}

Cache = {
	release_targets_in_world = function (self)
		for _, entity in pairs(self:get_entities()) do
			if entity.id and entity.section_name then
				igi_helper.trace_dbg("WTF: Release from world: "..entity.section_name.." with id: "..entity.id)
				entity:release()
			end
		end
	end,
}

WorldState = {}
WorldState.objects_by_name = igi_utils.defaultdict(function () return {} end)
WorldState.levels_by_distance = igi_utils.defaultdict(function () return {} end)
WorldState.smarts_by_level = igi_utils.defaultdict(function () return {} end)
WorldState.objects = {} -- 3x slower access to se_objects that do not exist, 100x faster access to existing objects
WorldState.distance_by_level = {}
WorldState.factions = _g.squad_community_by_behaviour


setmetatable(WorldState.objects, {__index = function (self, key)
    id = tonumber(key)
    igi_helper.trace_assert(id and id <= 65535, "Don't look at me, senpai >//////<\n")

    local se_obj = WorldState.sim:object(id)
    if not se_obj then return end

    add_to_objects(se_obj)
    return se_obj
end})


function fill_objects()
    -- Is about 3x slower than naive implementation for first run, gets up to 5x faster for non-first runs
    local add_to_objects, rawget = add_to_objects, rawget
	local objects, sim = WorldState.objects, WorldState.sim
    local sim_object = sim.object   -- this one access gives 25% performance boost
	for i=1,65534 do
        if not rawget(objects, i) then
            local se_obj = sim_object(sim, i)
            if se_obj then
                add_to_objects(se_obj)
            end
        end
	end
    ResetTimeEvent("igi_world_state", "fill_objects", 30)
end

function add_to_objects(se_obj)
    WorldState.objects[se_obj.id] = se_obj
    WorldState.objects_by_name[se_obj:section_name()][se_obj.id] = se_obj
end

function remove_from_objects(se_obj)
    WorldState.objects[se_obj.id] = nil
	WorldState.objects_by_name[se_obj:section_name()][se_obj.id] = nil
end

------------------------------

function sort_levels_by_distance()
	local actor_level = level.name()
    local levels_by_distance = WorldState.levels_by_distance
    local distance_by_level = WorldState.distance_by_level

	levels_by_distance[0] = {[actor_level] = true}
	distance_by_level[actor_level] = 0
	local visited = {[actor_level] = true}

	local cur_distance = 0
	local changes = true
	while changes do
		cur_distance = cur_distance + 1
		changes = false

		for start_level in pairs(levels_by_distance[cur_distance-1]) do
			local connected_levels = simulation_objects.config:r_value(
				start_level, "target_maps", 0, "")

			for con_level in connected_levels:gmatch("[^ ,]+") do
				if not visited[con_level] then
					visited[con_level] = true
					changes = true
					levels_by_distance[cur_distance][con_level] = true
					distance_by_level[con_level] = cur_distance
				end
			end
		end
	end
end

function sort_smarts_by_level()
	local sim = WorldState.sim
	local gg = WorldState.gg
    local smarts_by_level = WorldState.smarts_by_level

	for name, smart in pairs(SIMBOARD.smarts_by_names) do
		local smart_level = sim:level_name(gg:vertex(smart.m_game_vertex_id):level_id())
		smarts_by_level[smart_level][name] = true
	end
end
