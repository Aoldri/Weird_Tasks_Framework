Oh hey, big boy (or small boy), time to go serious.
I assume you've already read "Creating simple task" and "Json structure".

In this guide I'll focus on task json file, field "setup".
Also I'll introduce two essential parts of framework: macros and linker.

Task idea: 
	Let's say we want to
	a) spawn scaled to player amount of (random) either boars or npc squads on
	smart of linked level. This smart needs to be cleared.
	b) Spawn the same amount of guns as the amount of squads as a reward.
	
Well that sounds like a task already, right? Quite random tho.
For this thing we need macro as well as linker.

Introduction to Macro module:
	Macros are parts of text which will later be evaluated for a task.
	Syntax: "&*macro_name*(*arg1*,*arg2*,...)"
	Example: "&Random(1,3)&" will return random number from 1 to 3
	All macro functions are described in Macros.txt
	
Introduction to Linker module:
	A link is a thing with such look: "$*entity_type*_*group_id*_*entity_id*.*field*$"
	Self-links are supported through "$this.*field*$"
	Linker will substitute links with their respective value in respective entity
	

Let's assemble out task setup now:
First of all, we need a smart where we'll create squads and items:
	{
		"where":"nearby",
		"entity_type":"smart",
	}
	
Secondly, we want to create squads. I want player to kill them, so "target" will be "kill"
You can find squad sections in unpacked_db/configs/misc/squad_descr
Section for boars is: simulation_boar
Section for basic squad is: *faction*_sim_squad_advanced

Here we need to define faction of squad. Luckily, there's "Faction" macro for this.
Section using macro: "&Faction(enemy of taskgiver and enemy of actor)&_sim_squad_advanced"
Faction macro uses boolean parser so even things like this are possible:
	"&Faction((enemy of (enemy of taskgiver) and friend of actor) or freedom)"
	
But well... That looks not too clean. Let's define faction as virtual variable 
(aka not used anywhere else except linkage) inside squad entity:
	{
		"faction": "&Faction(enemy of taskgiver and enemy of actor)&"
		"section": "$this.faction$_sim_squad_advanced"
	}
That looks a little better, right? I love fancy stuff.

Now let's assemble the whole entity by adding a few more essential fields:
	{
		"entity_type":"squad",
		"to_create":true,
		"where":"$smart_1_1.id$",
		
		"faction": "&Faction(enemy of taskgiver and enemy of actor)&",
		"npc_section": "$this.faction$_sim_squad_advanced",
		"boars_section": "simulation_boar",
		
		"section": "&ChooseOne($this.npc_section$, $this.boars_section$)&",
		"amount": "&ScaleToPlayer(1, 3)&",
		"target": "kill",
	}
Notice that "faction", "npc_section" and "boars_section" are virtual, but all other fields
are needed for functioning of "kill".

One more part: items
	{
		"entity_type":"item",
		"amount":"$squad_1_1.amount$",
		"section":"&ChooseOne(wpn_sks,wpn_vepr)&",
		"target":"get",
		"to_create":true,
		"where":"$smart_1_1.id$",
		"to_description":true,
	},


Full json:
{
	"preconditions": {
	},
	"disabled": false,
	"setup": [
		{
		"where":"nearby",
		"entity_type":"smart",
		},
		
		{
		"entity_type":"squad",
		"to_create":true,
		"where":"$smart_1_1.id$",
		
		"faction": "&Faction(enemy of taskgiver and enemy of actor)&",
		"npc_section": "$this.faction$_sim_squad_advanced",
		"boars_section": "simulation_boar",
		
		"section": "&ChooseOne($this.npc_section$, $this.boars_section$)&",
		"amount": "&ScaleToPlayer(1, 3)&",
		"target": "kill",
		},
		
		{
		"entity_type":"item",
		"amount":"$squad_1_1.amount$",
		"section":"&ChooseOne(wpn_sks,wpn_vepr)&",
		"target":"get",
		"to_create":true,
		"where":"$smart_1_1.id$",
		"to_description":true,
		},
	],
	"reward": {
		"money": 0,
	},
}

Running this for the first time, you may see that target text is adding TEXT_HEADER to
section of gun. To make it readable add text with same id in some xml text file.
That's right, description module sucks, but it works at least.

